{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to the Virechana Karma Assessment App","text":""},{"location":"#overview","title":"Overview","text":"<p>The Virechana Karma Assessment App is a comprehensive tool designed for the documentation and assessment of Virechana Karma procedures. This application streamlines the process of recording patient details, conducting evaluations, and documenting post-procedure observations. Integrated with Google Sheets, it ensures efficient data storage and accessibility.</p>"},{"location":"#purpose","title":"Purpose","text":"<p>The primary objective of this app is to:</p> <ul> <li>Facilitate seamless data collection during the Virechana Karma procedure.</li> <li>Standardize the evaluation process with structured forms.</li> <li>Store data securely and accessibly in Google Sheets for further analysis and record-keeping.</li> </ul>"},{"location":"#key-features","title":"Key Features","text":""},{"location":"#1-sequential-navigation","title":"1. Sequential Navigation","text":"<p>The app ensures a guided workflow by organizing the assessment process into multiple pages. Each page focuses on a specific step of the procedure:</p> <ul> <li>Patient Details: Collect basic information about the patient.</li> <li>Purvakarma: Record pre-procedure metrics.</li> <li>Pradhana Karma: Document key procedure details.</li> <li>Shuddhi Assessment: Evaluate the effectiveness of the procedure.</li> <li>Samyak Yoga Lakshana: Record observations for <code>Samyak Yoga</code>.</li> <li>Ayoga: List symptoms indicating incomplete Virechana.</li> <li>Atiyoga: Document excessive Virechana symptoms.</li> <li>Post-Procedure: Record post-procedure observations.</li> <li>Summary: Review all collected data and submit it to Google Sheets.</li> </ul>"},{"location":"#2-data-integration-with-google-sheets","title":"2. Data Integration with Google Sheets","text":"<p>The app leverages the Google Sheets API for:</p> <ul> <li>Secure data storage.</li> <li>Easy access to patient records for further analysis.</li> <li>Reliable backups and efficient record management.</li> </ul>"},{"location":"#3-user-friendly-interface","title":"3. User-Friendly Interface","text":"<ul> <li>Clean and intuitive navigation.</li> <li>Dropdowns, checkboxes, and text fields tailored for specific inputs.</li> <li>Dynamic forms, such as Vega entries, for flexible data recording.</li> </ul>"},{"location":"#4-state-management-with-riverpod","title":"4. State Management with Riverpod","text":"<ul> <li>Efficient handling of form states and user interactions.</li> <li>Real-time updates across pages for a seamless experience.</li> </ul>"},{"location":"#5-validation-and-error-handling","title":"5. Validation and Error Handling","text":"<ul> <li>Ensures accuracy with input validations (e.g., numeric fields, required fields).</li> <li>Prevents data loss with warnings and validation checks.</li> </ul>"},{"location":"#how-it-works","title":"How It Works","text":"<p>Initialization</p> <ul> <li>The app initializes the Google Sheets API and prepares the environment for data collection.</li> </ul> <p>Sequential Assessment</p> <ul> <li>The user is guided through structured steps, ensuring all relevant data is captured.</li> </ul> <p>Data Submission</p> <ul> <li>At the end of the assessment, the collected data is submitted to Google Sheets.</li> <li>Dynamic Vega entries and assessment scores are calculated and stored efficiently.</li> </ul> <p>State Reset</p> <ul> <li>After submission, the form resets for the next assessment.</li> </ul>"},{"location":"#workflow-overview","title":"Workflow Overview","text":"<p>Patient Details  Record the patient's name, age, diagnosis, and other basic information.</p> <p>Pre-Procedure Metrics (Purvakarma)  Evaluate the patient's bowel habits, consistency, urgency, and related metrics.</p> <p>Procedure Details (Pradhana Karma)  Document key observations such as temperature, pulse rate, BP, and respiratory rate.</p> <p>Shuddhi Assessment  Assess the effectiveness of the procedure with classification into <code>Avara</code>, <code>Madhyama</code>, or <code>Pravara Shuddhi</code>.</p> <p>Symptom Tracking</p> <ul> <li>Samyak Yoga Lakshana: Record observations for proper Virechana outcomes.</li> <li>Ayoga Symptoms: Note signs of incomplete Virechana.</li> <li>Atiyoga Symptoms: Identify excessive Virechana outcomes.</li> </ul> <p>Post-Procedure Observations  Document post-procedure metrics like weight, temperature, and complications.</p> <p>Summary and Submission  Review all collected data and submit it to Google Sheets.</p>"},{"location":"#getting-started","title":"Getting Started","text":"<p>To start using the app:</p> <ol> <li>Install Flutter and the required dependencies.</li> <li>Clone the project repository.</li> <li>Initialize the app with your Google Sheets credentials.</li> <li>Run the app on your preferred device.</li> </ol> <p>For detailed setup instructions, refer to the Getting Started page.</p>"},{"location":"#additional-resources","title":"Additional Resources","text":"<p>Explore the following sections for more information:</p> <ul> <li>Folder Structure: Understand the organization of the project files.</li> <li>API Integration: Learn about the Google Sheets API integration.</li> </ul>"},{"location":"#conclusion","title":"Conclusion","text":"<p>The Virechana Karma Assessment App is a robust and efficient solution for standardizing the Virechana procedure documentation. By integrating cutting-edge technologies, it ensures accuracy, reliability, and ease of use.</p>"},{"location":"#contacts","title":"Contacts","text":"<p>Created by Dr. Sumit Kalra, Sachin Singh, Richard David. \u00a9 2024.</p>"},{"location":"api_integration/","title":"API Integration","text":"<p>This page provides an overview of the API integration used in the Virechana Assessment App, specifically the integration with Google Sheets for data storage.</p>"},{"location":"api_integration/#overview","title":"Overview","text":"<p>The <code>VirechanaSheetApi</code> class handles the integration with Google Sheets. It allows the app to:</p> <ul> <li>Initialize sheets for storing user and vega entry data.</li> <li>Insert new data into the respective sheets.</li> </ul> <p>The integration uses the <code>gsheets</code> package for seamless interaction with Google Sheets.</p>"},{"location":"api_integration/#setup","title":"Setup","text":"<ol> <li> <p>Google Sheets API Credentials</p> </li> <li> <p>The <code>credentials</code> JSON file from Google Cloud Platform is stored in <code>_credentials</code>.</p> </li> <li> <p>Replace the placeholder credentials with your actual JSON credentials for the Google Sheets API.</p> </li> <li> <p>Spreadsheet ID</p> </li> <li> <p>Set the <code>spreadsheetID</code> to the ID of the Google Sheet you want to interact with.</p> </li> </ol> <p><code>static final _spreadsheetID = 'your_spreadsheet_id';</code></p> <ol> <li>Dependencies    Add the following dependencies to your <code>pubspec.yaml</code> file:</li> </ol> <p><code>dependencies:      gsheets: ^0.5.1</code></p> <ol> <li>Initialization    The <code>init()</code> function initializes the Google Sheets API and prepares the sheets with the required headers.</li> </ol>"},{"location":"api_integration/#key-functions","title":"Key Functions","text":""},{"location":"api_integration/#1-initialization","title":"1. Initialization","text":"<p>Initializes the Google Sheets API and prepares the worksheets.</p> <pre><code>static Future init() async {\n  try {\n    final spreadsheet = await _gsheets.spreadsheet(_spreadsheetID);\n\n    // Initialize the Users sheet\n    _userSheet = await _getWorkSheet(spreadsheet, title: 'Users');\n    final userHeaders = UserFields.getFields();\n    await _userSheet!.values.insertRow(1, userHeaders);\n\n    // Initialize the Vega Entries sheet\n    _vegaSheet = await _getWorkSheet(spreadsheet, title: 'VegaEntries');\n    final vegaHeaders = [\n      'Date', 'UHID No.', 'Time', 'Vega', 'Upavega',\n      'BP Systolic (mmHg)', 'BP Diastolic (mmHg)',\n      'Pulse', 'SpO2', 'Remarks'\n    ];\n    final existingVegaHeader = await _vegaSheet!.values.row(1);\n    if (existingVegaHeader.isEmpty) {\n      await _vegaSheet!.values.insertRow(1, vegaHeaders);\n    }\n  } catch (e) {\n    print('Init Error: $e');\n  }\n}\n</code></pre>"},{"location":"api_integration/#2-insert-vega-entries","title":"2. Insert Vega Entries","text":"<p>Inserts multiple rows of Vega entry data into the <code>VegaEntries</code> sheet.</p> <pre><code>static Future insertVegaEntries(List&lt;List&lt;String&gt;&gt; rows) async {\n  try {\n    if (_vegaSheet == null) {\n      return;\n    }\n    await _vegaSheet!.values.appendRows(rows);\n  } catch (e) {\n    print('Error inserting Vega Entries: $e');\n  }\n}\n</code></pre>"},{"location":"api_integration/#3-insert-user-data","title":"3. Insert User Data","text":"<p>Adds user information into the <code>Users</code> sheet.</p> <pre><code>static Future insert(List&lt;Map&lt;String, dynamic&gt;&gt; rowList) async {\n  if (_userSheet == null) return;\n  _userSheet!.values.map.appendRows(rowList);\n}\n</code></pre>"},{"location":"api_integration/#helper-functions","title":"Helper Functions","text":""},{"location":"api_integration/#create-or-get-worksheet","title":"Create or Get Worksheet","text":"<p>The <code>_getWorkSheet</code> function ensures a worksheet is created or fetched if it already exists.</p> <pre><code>static Future&lt;Worksheet&gt; _getWorkSheet(\n  Spreadsheet spreadsheet, {\n  required String title,\n}) async {\n  try {\n    return await spreadsheet.addWorksheet(title);\n  } catch (e) {\n    return spreadsheet.worksheetByTitle(title)!;\n  }\n}\n</code></pre>"},{"location":"api_integration/#data-format","title":"Data Format","text":""},{"location":"api_integration/#user-data","title":"User Data","text":"<p>The <code>Users</code> worksheet is initialized with the following headers:</p> <ul> <li>Name</li> <li>Age</li> <li>Gender</li> <li>Contact Details</li> <li>(Additional fields as defined in <code>UserFields.getFields()</code>)</li> </ul>"},{"location":"api_integration/#vega-entries","title":"Vega Entries","text":"<p>The <code>VegaEntries</code> worksheet uses the following headers:</p> <ul> <li>Date</li> <li>Patient Name</li> <li>Time</li> <li>Vega</li> <li>Upavega</li> <li>BP Systolic (mmHg)</li> <li>BP Diastolic (mmHg)</li> <li>Pulse</li> <li>SpO2</li> <li>Remarks</li> </ul>"},{"location":"api_integration/#error-handling","title":"Error Handling","text":"<ul> <li>Initialization Errors: If the spreadsheet or sheets are not correctly set up, appropriate messages are printed to the console.</li> <li>Data Insertion Errors: Checks are in place to ensure sheets are initialized before inserting data.</li> </ul>"},{"location":"api_integration/#references","title":"References","text":"<ul> <li>GSheets Package Documentation</li> <li>Google Sheets API Setup Guide</li> </ul>"},{"location":"atiyoga/","title":"Atiyoga of Virechana Page","text":"<p>The Atiyoga of Virechana Page is a user-friendly interface designed to record symptoms of excessive cleansing (Atiyoga) dynamically. It allows users to select symptoms via checkboxes and stores the data for further evaluation. This page integrates seamlessly with the app\u2019s state management system to provide real-time updates and dynamic UI.</p>"},{"location":"atiyoga/#overview","title":"Overview","text":"<p>Purpose: To collect and manage symptoms of Atiyoga of Virechana (excessive cleansing). Features:</p> <ul> <li>Dynamically generated checkboxes for symptoms.</li> <li>Integration with Riverpod for real-time state management.</li> <li>Navigation controls to move between pages.</li> <li>Responsive design for all screen sizes.</li> </ul>"},{"location":"atiyoga/#key-features","title":"Key Features","text":"<p>Dynamic Checkbox List</p> <ul> <li>Checkboxes for all Atiyoga symptoms are dynamically generated.</li> <li>The list is based on the state provided by the <code>atiyogaProvider</code>.</li> </ul> <p>Real-Time State Management</p> <ul> <li>Uses Riverpod's <code>StateNotifierProvider</code> to manage and update checkbox states.</li> <li>Ensures all changes are reflected immediately in the UI.</li> </ul> <p>Symptom Data Collection</p> <ul> <li>Records user inputs for each checkbox and stores the selected symptoms in the app state.</li> </ul> <p>Seamless Navigation</p> <ul> <li>Includes Back and Next buttons for moving between pages.</li> </ul> <p>Responsive Design</p> <ul> <li>Ensures proper layout and scrolling for all screen sizes.</li> </ul>"},{"location":"atiyoga/#code-breakdown","title":"Code Breakdown","text":""},{"location":"atiyoga/#class-declaration","title":"Class Declaration","text":"<pre><code>class AtiyogaOfVirechanaPage extends ConsumerWidget {\n  final PageController controller;\n\n  AtiyogaOfVirechanaPage({required this.controller});\n\n  @override\n  Widget build(BuildContext context, WidgetRef ref) {\n    final atiyodaState = ref.watch(atiyogaProvider);\n    // Rest of the code...\n  }\n}\n</code></pre> <ul> <li>Inherits from <code>ConsumerWidget</code> to integrate with Riverpod.</li> <li>Accepts a <code>PageController</code> for managing navigation between pages.</li> </ul>"},{"location":"atiyoga/#dynamic-checkbox-list","title":"Dynamic Checkbox List","text":"<p>The checkboxes are generated dynamically using the keys from the <code>atiyogaProvider</code> state:</p> <pre><code>...atiyodaState.keys.map((option) {\n  return CheckboxListTile(\n    title: Text(option),\n    value: atiyodaState[option] ?? false,\n    onChanged: (bool? value) {\n      ref.read(atiyogaProvider.notifier).toggleCheckbox(option, value);\n    },\n  );\n}).toList(),\n</code></pre> <ul> <li><code>title</code>: Displays the symptom name.</li> <li><code>value</code>: Represents the current state of the checkbox.</li> <li><code>onChanged</code>: Updates the state when the checkbox is toggled.</li> </ul>"},{"location":"atiyoga/#state-management","title":"State Management","text":"<p>The state is managed using Riverpod's <code>atiyogaProvider</code>:</p> <pre><code>final atiyodaState = ref.watch(atiyogaProvider);\n</code></pre> <ul> <li>Watches the state of all checkboxes.</li> <li>Changes are handled by the <code>toggleCheckbox</code> method in the <code>AtiyogaState</code> class.</li> </ul>"},{"location":"atiyoga/#navigation-buttons","title":"Navigation Buttons","text":""},{"location":"atiyoga/#back-button","title":"Back Button","text":"<pre><code>IconButton(\n  icon: Icon(Icons.arrow_back),\n  onPressed: () {\n    controller.previousPage(\n      duration: Duration(milliseconds: 300),\n      curve: Curves.easeInOut,\n    );\n  },\n),\n</code></pre> <ul> <li>Navigates to the previous page.</li> </ul>"},{"location":"atiyoga/#next-button","title":"Next Button","text":"<pre><code>ElevatedButton(\n  onPressed: () {\n    atiyodaState.forEach((key, value) {\n      ref.read(atiyogaProvider.notifier).updateField(key, value);\n    });\n\n    controller.nextPage(\n      duration: Duration(milliseconds: 300),\n      curve: Curves.easeInOut,\n    );\n  },\n  child: Text('Next'),\n),\n</code></pre> <ul> <li>Updates the form state with the current checkbox values.</li> <li>Navigates to the next page.</li> </ul>"},{"location":"atiyoga/#usage","title":"Usage","text":""},{"location":"atiyoga/#state-initialization","title":"State Initialization","text":"<p>The state is initialized in the <code>AtiyogaState</code> class with the following symptoms set to <code>false</code> by default:</p> <ul> <li>Medomamsa Udakaopmam</li> <li>Angamarda</li> <li>Jarjaribhava</li> <li>Klama / Balabhava</li> <li>Vepana</li> <li>Tamah Pravesha</li> <li>Hikka</li> <li>Guda Bhramsha / Nissarana</li> <li>Netra Pravesha</li> <li>Parikartika</li> <li>Chimchimayan</li> <li>Parshva Shoola</li> <li>Shoonyata</li> </ul>"},{"location":"atiyoga/#state-updates","title":"State Updates","text":"<p>The state is updated dynamically when a checkbox is toggled:</p> <pre><code>ref.read(atiyogaProvider.notifier).toggleCheckbox(option, value);\n</code></pre>"},{"location":"atiyoga/#state-watching","title":"State Watching","text":"<p>The state is watched using the <code>ref.watch</code> method to ensure the UI reflects the latest state:</p> <pre><code>final atiyodaState = ref.watch(atiyogaProvider);\n</code></pre>"},{"location":"atiyoga/#conclusion","title":"Conclusion","text":"<p>The Atiyoga of Virechana Page is a critical part of the Virechana Assessment App. It enables dynamic and real-time data collection for Atiyoga symptoms, ensuring accurate evaluation. The integration with Riverpod ensures seamless state management, providing a responsive and user-friendly experience.</p>"},{"location":"atiyoga_state/","title":"Atiyoga State Management","text":"<p>The AtiyogaState class manages the state of the checkboxes for the Atiyoga of Virechana page. It uses Riverpod's <code>StateNotifier</code> for state management, allowing efficient and dynamic updates to the checkbox states in the application.</p>"},{"location":"atiyoga_state/#overview","title":"Overview","text":"<ul> <li>Purpose: To manage the state of checkboxes for the symptoms related to Atiyoga of Virechana.</li> <li>Features:<pre><code>Initializes checkbox states with default values.\nProvides methods to reset, update, and toggle individual checkbox states.\nIntegrated with Riverpod for seamless state management.\n</code></pre> </li> </ul>"},{"location":"atiyoga_state/#key-features","title":"Key Features","text":"<p>Initial State Management: Initializes all symptoms related to Atiyoga with a default value of <code>false</code>.</p> <p>List of symptoms managed:</p> <ul> <li>Medomamsa Udakaopmam</li> <li>Angamarda</li> <li>Jarjaribhava</li> <li>Klama / Balabhava</li> <li>Vepana</li> <li>Tamah Pravesha</li> <li>Hikka</li> <li>Guda Bhramsha / Nissarana</li> <li>Netra Pravesha</li> <li>Parikartika</li> <li>Chimchimayan</li> <li>Parshva Shoola</li> <li>Shoonyata</li> </ul> <p>Reset State: Resets all symptoms' states to their default (<code>false</code>).</p> <p>Update Individual Fields: Updates the state of a specific checkbox dynamically.</p> <p>Toggle Checkbox State: Toggles the state of a specific checkbox.</p> <p>Integration with Riverpod: Exposes the state using a <code>StateNotifierProvider</code> for easy integration with the UI.</p>"},{"location":"atiyoga_state/#code-breakdown","title":"Code Breakdown","text":""},{"location":"atiyoga_state/#class-declaration","title":"Class Declaration","text":"<pre><code>\nclass AtiyogaState extends StateNotifier&lt;Map&lt;String, bool&gt;&gt; {\nAtiyogaState()\n: super({\n'Medomamsa udakaopmam': false,\n'Angamarda': false,\n'Jarjaribhava': false,\n'Klama / Balabhava': false,\n'Vepana': false,\n'Tamah Pravesha': false,\n'Hikka': false,\n'Guda Bhramsha / nissarana': false,\n'Netra Pravesha': false,\n'Parikartika': false,\n'Chimchimayan': false,\n'Parshva Shoola': false,\n'Shoonyata': false,\n});\n}\n\n</code></pre> <ul> <li>Inherits from <code>StateNotifier&lt;Map&lt;String, bool&gt;&gt;</code>.</li> <li>Initializes the state with the default values for all symptoms.</li> </ul>"},{"location":"atiyoga_state/#reset-state-method","title":"Reset State Method","text":"<pre><code>\nvoid resetState() {\nstate = {\n'Medomamsa udakaopmam': false,\n'Angamarda': false,\n'Jarjaribhava': false,\n'Klama / Balabhava': false,\n'Vepana': false,\n'Tamah Pravesha': false,\n'Hikka': false,\n'Guda Bhramsha / nissarana': false,\n'Netra Pravesha': false,\n'Parikartika': false,\n'Chimchimayan': false,\n'Parshva Shoola': false,\n'Shoonyata': false,\n};\n}\n\n</code></pre> <ul> <li>Resets all symptoms' states to <code>false</code>.</li> </ul>"},{"location":"atiyoga_state/#update-individual-fields","title":"Update Individual Fields","text":"<pre><code>\nvoid updateField(String key, dynamic value) {\nstate = {...state, key: value};\n}\n\n</code></pre> <ul> <li>Updates the state of a specific checkbox field.</li> <li>Ensures immutability by creating a new state map using the spread operator.</li> </ul>"},{"location":"atiyoga_state/#toggle-checkbox-state","title":"Toggle Checkbox State","text":"<pre><code>\nvoid toggleCheckbox(String option, bool? value) {\nstate = {\n...state,\noption: value ?? false, // Toggle the current state of the checkbox\n};\n}\n\n</code></pre> <ul> <li>Toggles the state of the checkbox for the given symptom.</li> <li>If the value is <code>null</code>, it defaults to <code>false</code>.</li> </ul>"},{"location":"atiyoga_state/#provider-for-state-management","title":"Provider for State Management","text":"<pre><code>\nfinal atiyogaProvider = StateNotifierProvider&lt;AtiyogaState, Map&lt;String, bool?&gt;&gt;(\n(ref) =&gt; AtiyogaState(),\n);\n\n</code></pre> <ul> <li>Creates a provider to expose the AtiyogaState to the app.</li> <li>Allows the UI to subscribe to state changes and trigger updates dynamically.</li> </ul>"},{"location":"atiyoga_state/#usage","title":"Usage","text":""},{"location":"atiyoga_state/#accessing-the-state","title":"Accessing the State","text":"<pre><code>\nfinal atiyogaState = ref.watch(atiyogaProvider);\n\n</code></pre> <ul> <li>Use <code>ref.watch</code> to read the current state of the checkboxes.</li> </ul>"},{"location":"atiyoga_state/#updating-the-state","title":"Updating the State","text":"<pre><code>\nref.read(atiyogaProvider.notifier).updateField('Angamarda', true);\n\n</code></pre> <ul> <li>Updates the state of the Angamarda checkbox to <code>true</code>.</li> </ul>"},{"location":"atiyoga_state/#toggling-a-checkbox","title":"Toggling a Checkbox","text":"<pre><code>\nref.read(atiyogaProvider.notifier).toggleCheckbox('Vepana', true);\n\n</code></pre> <ul> <li>Toggles the checkbox for Vepana to <code>true</code>.</li> </ul>"},{"location":"atiyoga_state/#resetting-the-state","title":"Resetting the State","text":"<pre><code>\nref.read(atiyogaProvider.notifier).resetState();\n\n</code></pre> <ul> <li>Resets all checkbox fields to their default values.</li> </ul>"},{"location":"atiyoga_state/#conclusion","title":"Conclusion","text":"<p>The AtiyogaState class provides a robust and efficient way to manage the checkbox states for the Atiyoga of Virechana page. By leveraging Riverpod's <code>StateNotifier</code>, it ensures real-time updates, state immutability, and seamless integration with the UI. This implementation is a vital component of the Virechana Assessment App, helping to accurately track and evaluate Atiyoga symptoms.</p> <pre><code>\n</code></pre>"},{"location":"ayoga/","title":"Ayoga of Virechna Page","text":"<p>The Ayoga of Virechna Page is a dynamic and interactive screen designed to collect and manage symptoms associated with insufficient cleansing (Ayoga). This page allows users to toggle checkboxes corresponding to various symptoms, stores the data in the app's state, and facilitates navigation.</p>"},{"location":"ayoga/#overview","title":"Overview","text":"<p>Purpose: To collect data about the presence of Ayoga of Virechna symptoms using checkboxes. Features:</p> <pre><code>Dynamically generated checkboxes for each symptom.\nIntegration with Riverpod for real-time state updates.\nNavigation controls to move between pages.\nResponsive design for all screen sizes.\n</code></pre>"},{"location":"ayoga/#key-features","title":"Key Features","text":"<ol> <li> <p>Dynamic Checkbox Generation: Checkboxes are generated dynamically based on the state managed by the <code>ayogaProvider</code>.</p> </li> <li> <p>Real-Time State Management: Uses Riverpod's <code>StateNotifierProvider</code> to manage checkbox states. Updates the state instantly when a checkbox is toggled.</p> </li> <li> <p>Symptom Data Collection: Collects user inputs and stores the selected symptoms for further evaluation.</p> </li> <li> <p>Seamless Navigation: Includes navigation buttons for moving to the next or previous pages.</p> </li> <li> <p>Responsive UI: Ensures proper layout and scrolling on smaller screens.</p> </li> </ol>"},{"location":"ayoga/#code-breakdown","title":"Code Breakdown","text":""},{"location":"ayoga/#class-declaration","title":"Class Declaration","text":"<pre><code>class AyogaOfVirechnaPage extends ConsumerWidget {\n  final PageController controller;\n\n  AyogaOfVirechnaPage({required this.controller});\n\n  @override\n  Widget build(BuildContext context, WidgetRef ref) {\n    final ayogaState = ref.watch(ayogaProvider);\n    // Rest of the code...\n  }\n}\n</code></pre> <ul> <li>Inherits from <code>ConsumerWidget</code> to integrate with Riverpod.</li> <li>Accepts a <code>PageController</code> for handling navigation.</li> </ul>"},{"location":"ayoga/#dynamic-checkbox-list","title":"Dynamic Checkbox List","text":"<p>The checkboxes are generated dynamically using the keys from the <code>ayogaState</code>:</p> <pre><code>...ayogaState.keys.map((option) {\n  return CheckboxListTile(\n    title: Text(option),\n    value: ayogaState[option] ?? false,\n    onChanged: (bool? value) {\n      ref.read(ayogaProvider.notifier).toggleCheckbox(option, value);\n    },\n  );\n}).toList(),\n</code></pre> <ul> <li><code>title</code>: Displays the symptom name.</li> <li><code>value</code>: Represents the current state of the checkbox.</li> <li><code>onChanged</code>: Updates the state when the checkbox is toggled.</li> </ul>"},{"location":"ayoga/#state-management","title":"State Management","text":"<p>The state is managed using Riverpod's <code>ayogaProvider</code>:</p> <pre><code>final ayogaState = ref.watch(ayogaProvider);\n</code></pre> <ul> <li>Watches the state of all checkboxes.</li> <li>Changes are handled by the <code>toggleCheckbox</code> method in the <code>AyogaState</code> class.</li> </ul>"},{"location":"ayoga/#navigation-buttons","title":"Navigation Buttons","text":""},{"location":"ayoga/#back-button","title":"Back Button","text":"<pre><code>IconButton(\n  icon: Icon(Icons.arrow_back),\n  onPressed: () {\n    controller.previousPage(\n      duration: Duration(milliseconds: 300),\n      curve: Curves.easeInOut,\n    );\n  },\n),\n</code></pre>"},{"location":"ayoga/#next-button","title":"Next Button","text":"<pre><code>ElevatedButton(\n  onPressed: () {\n    ayogaState.forEach((key, value) {\n      ref.read(ayogaProvider.notifier).updateField(key, value);\n    });\n\n    controller.nextPage(\n      duration: Duration(milliseconds: 300),\n      curve: Curves.easeInOut,\n    );\n  },\n  child: Text('Next'),\n),\n</code></pre> <ul> <li>Updates the form state with the current checkbox values.</li> <li>Navigates to the next page.</li> </ul>"},{"location":"ayoga/#usage","title":"Usage","text":""},{"location":"ayoga/#state-initialization","title":"State Initialization","text":"<p>The initial state is defined in the <code>AyogaState</code> class, including the following symptoms:</p> <ul> <li>Pratiloma Gati Dosha Srava</li> <li>Glani</li> <li>Hridya Ashuddhi</li> <li>Kale Apravartan</li> <li>Kshtheevana</li> <li>Tandra</li> <li>Marutasya Nigraha</li> <li>Paridaha</li> <li>Bhrama</li> <li>Gatreshu Bhramana</li> </ul> <p>Each symptom is set to <code>false</code> by default.</p>"},{"location":"ayoga/#state-updates","title":"State Updates","text":"<p>The state is updated dynamically when a checkbox is toggled:</p> <pre><code>ref.read(ayogaProvider.notifier).toggleCheckbox(option, value);\n</code></pre>"},{"location":"ayoga/#state-watching","title":"State Watching","text":"<p>The state is watched using the <code>ref.watch</code> method to ensure the UI reflects the current state:</p> <pre><code>final ayogaState = ref.watch(ayogaProvider);\n</code></pre>"},{"location":"ayoga/#conclusion","title":"Conclusion","text":"<p>The Ayoga of Virechna Page provides a flexible and efficient way to collect and manage data about Ayoga symptoms. By leveraging Riverpod for state management, it ensures seamless updates and a responsive user experience. This page is a crucial component of the Virechana Assessment App, aiding in the evaluation of incomplete cleansing.</p>"},{"location":"ayoga_state/","title":"Ayoga of Virechna Page","text":"<p>The Ayoga of Virechna Page allows users to record symptoms of insufficient cleansing (Ayoga) dynamically through checkboxes. This page is an integral part of the Virechana Assessment App, facilitating accurate data collection about the patient's condition.</p>"},{"location":"ayoga_state/#overview","title":"Overview","text":"<ul> <li>Purpose: Collect symptoms associated with Ayoga of Virechna (incomplete cleansing) using checkboxes.</li> <li>Features:<pre><code>Dynamically generates checkboxes for Ayoga symptoms.\nReal-time state management using Riverpod.\nCollects selected symptoms and stores them for further evaluation.\nProvides navigation between pages.\n</code></pre> </li> </ul>"},{"location":"ayoga_state/#key-features","title":"Key Features","text":"<ol> <li> <p>Dynamic Checkbox List: Each checkbox corresponds to an Ayoga of Virechna symptom. The list is dynamically generated from the AyogaState.</p> </li> <li> <p>Real-Time State Management: Uses Riverpod's <code>StateNotifierProvider</code> to manage checkbox states. Updates the state dynamically when a checkbox is toggled.</p> </li> <li> <p>Symptom Collection: Collects selected symptoms and stores them in the form state.</p> </li> <li> <p>Seamless Navigation: Includes navigation buttons to move between pages.</p> </li> <li> <p>Responsive Design: Ensures proper layout and scrolling for all screen sizes.</p> </li> </ol>"},{"location":"ayoga_state/#code-breakdown","title":"Code Breakdown","text":""},{"location":"ayoga_state/#class-declaration","title":"Class Declaration","text":"<pre><code>class AyogaOfVirechnaPage extends ConsumerWidget {\n  final PageController controller;\n\n  AyogaOfVirechnaPage({required this.controller});\n\n  @override\n  Widget build(BuildContext context, WidgetRef ref) {\n    final ayogaState = ref.watch(ayogaProvider);\n    // Rest of the code...\n  }\n}\n</code></pre> <ul> <li>Inherits from <code>ConsumerWidget</code> to enable Riverpod integration.</li> <li>Accepts a <code>PageController</code> to manage navigation.</li> </ul>"},{"location":"ayoga_state/#checkbox-list","title":"Checkbox List","text":"<p>Checkboxes are dynamically generated based on the keys in the <code>ayogaProvider</code> state:</p> <pre><code>...ayogaState.keys.map((option) {\n  return CheckboxListTile(\n    title: Text(option),\n    value: ayogaState[option] ?? false,\n    onChanged: (bool? value) {\n      ref.read(ayogaProvider.notifier).toggleCheckbox(option, value);\n    },\n  );\n}).toList(),\n</code></pre> <ul> <li><code>title</code>: Displays the name of the symptom.</li> <li><code>value</code>: Represents the current state of the checkbox.</li> <li><code>onChanged</code>: Toggles the checkbox state and updates it in the <code>ayogaProvider</code>.</li> </ul>"},{"location":"ayoga_state/#state-management","title":"State Management","text":"<p>The state is managed using Riverpod's <code>ayogaProvider</code>:</p> <pre><code>final ayogaState = ref.watch(ayogaProvider);\n</code></pre> <ul> <li>The <code>ayogaProvider</code> holds the current state of all checkboxes.</li> <li>Changes to the checkboxes are handled by the <code>toggleCheckbox</code> method in the <code>AyogaState</code> class.</li> </ul>"},{"location":"ayoga_state/#navigation-buttons","title":"Navigation Buttons","text":""},{"location":"ayoga_state/#back-button","title":"Back Button","text":"<pre><code>IconButton(\n  icon: Icon(Icons.arrow_back),\n  onPressed: () {\n    controller.previousPage(\n      duration: Duration(milliseconds: 300),\n      curve: Curves.easeInOut,\n    );\n  },\n),\n</code></pre> <ul> <li>Navigates to the previous page.</li> </ul>"},{"location":"ayoga_state/#next-button","title":"Next Button","text":"<pre><code>ElevatedButton(\n  onPressed: () {\n    ayogaState.forEach((key, value) {\n      ref.read(ayogaProvider.notifier).updateField(key, value);\n    });\n\n    // Navigate to the next page\n    controller.nextPage(\n      duration: Duration(milliseconds: 300),\n      curve: Curves.easeInOut,\n    );\n  },\n  child: Text('Next'),\n),\n</code></pre> <ul> <li>Updates the form state with the current checkbox values.</li> <li>Navigates to the next page.</li> </ul>"},{"location":"ayoga_state/#usage","title":"Usage","text":""},{"location":"ayoga_state/#state-initialization","title":"State Initialization","text":"<p>The initial state is defined in the <code>AyogaState</code> class and includes the following symptoms:</p> <ul> <li>Pratiloma Gati Dosha Srava</li> <li>Glani</li> <li>Hridya Ashuddhi</li> <li>Kale Apravartan</li> <li>Kshtheevana</li> <li>Tandra</li> <li>Marutasya Nigraha</li> <li>Paridaha</li> <li>Bhrama</li> <li>Gatreshu Bhramana</li> </ul> <p>Each symptom is set to <code>false</code> by default.</p>"},{"location":"ayoga_state/#state-updates","title":"State Updates","text":"<p>The state is updated dynamically when a checkbox is toggled:</p> <pre><code>ref.read(ayogaProvider.notifier).toggleCheckbox(option, value);\n</code></pre> <ul> <li><code>toggleCheckbox(String option, bool? value)</code>: Toggles the checkbox state for the given symptom.</li> </ul>"},{"location":"ayoga_state/#state-watching","title":"State Watching","text":"<p>The <code>ref.watch</code> method ensures that the UI reflects the latest state:</p> <pre><code>final ayogaState = ref.watch(ayogaProvider);\n</code></pre>"},{"location":"ayoga_state/#conclusion","title":"Conclusion","text":"<p>The Ayoga of Virechna Page provides a dynamic and efficient way to collect data about Ayoga symptoms. By leveraging Riverpod for state management, it ensures real-time updates and seamless navigation. This page is essential for evaluating the completeness of the cleansing process in the Virechana Assessment App.</p>"},{"location":"folder_structure/","title":"Folder Structure","text":"<p>This document provides an overview of the folder structure used in the Virechana Assessment App. Each folder and file is described to help you understand its purpose within the application.</p>"},{"location":"folder_structure/#project-directory","title":"Project Directory","text":"<p>The root directory of the project contains the following:</p> <pre><code>\nvirechana-App/\n\u251c\u2500\u2500 .dart_tool/ # Flutter's internal tools and build cache\n\u251c\u2500\u2500 .idea/ # Project metadata for JetBrains IDEs (e.g., IntelliJ, Android Studio)\n\u251c\u2500\u2500 android/ # Android-specific files and configuration\n\u251c\u2500\u2500 build/ # Generated build files\n\u251c\u2500\u2500 code-documentation/ # MkDocs-based project documentation\n\u251c\u2500\u2500 ios/ # iOS-specific files and configuration\n\u251c\u2500\u2500 lib/ # Main source code of the app\n\u251c\u2500\u2500 linux/ # Linux-specific files (optional for Flutter desktop apps)\n\u251c\u2500\u2500 macos/ # macOS-specific files (optional for Flutter desktop apps)\n\u251c\u2500\u2500 test/ # Unit and widget test files\n\u251c\u2500\u2500 web/ # Web-specific files (for Flutter web apps)\n\u251c\u2500\u2500 windows/ # Windows-specific files (optional for Flutter desktop apps)\n\u251c\u2500\u2500 pubspec.yaml # Flutter project configuration file\n\u2514\u2500\u2500 README.md # Project description and usage guide\n\n</code></pre>"},{"location":"folder_structure/#source-code-structure","title":"Source Code Structure","text":"<p>The <code>lib/</code> folder contains the primary codebase for the app:</p> <pre><code>\nlib/\n\u251c\u2500\u2500 api/ # Handles API integrations\n\u2502 \u2514\u2500\u2500 virechana_sheets_api.dart # Google Sheets API integration\n\u251c\u2500\u2500 model/ # Contains app-specific data models\n\u2502 \u2514\u2500\u2500 user.dart # User data model\n\u251c\u2500\u2500 screens/ # Contains individual screens of the app\n\u2502 \u251c\u2500\u2500 page1_patient_details.dart\n\u2502 \u251c\u2500\u2500 page2_purvakarma.dart\n\u2502 \u251c\u2500\u2500 page3_pradhana_karma.dart\n\u2502 \u251c\u2500\u2500 page4_shuddhi_assessment.dart\n\u2502 \u251c\u2500\u2500 page5_samyak.dart\n\u2502 \u251c\u2500\u2500 page6_ayoga.dart\n\u2502 \u251c\u2500\u2500 page7_atiyoga.dart\n\u2502 \u251c\u2500\u2500 page8_post_procedure.dart\n\u2502 \u2514\u2500\u2500 page9_summary.dart\n\u251c\u2500\u2500 state/ # Manages application state\n\u2502 \u251c\u2500\u2500 form_state.dart\n\u2502 \u251c\u2500\u2500 samyak_state.dart\n\u2502 \u251c\u2500\u2500 ayoga_state.dart\n\u2502 \u2514\u2500\u2500 atiyoga_state.dart\n\u251c\u2500\u2500 widgets/ # Reusable widgets for UI components\n\u2502 \u2514\u2500\u2500 form_widgets.dart\n\u2514\u2500\u2500 main.dart # Entry point of the application\n\n</code></pre>"},{"location":"folder_structure/#detailed-descriptions","title":"Detailed Descriptions","text":""},{"location":"folder_structure/#api","title":"<code>api/</code>","text":"<ul> <li>Purpose: Contains logic for API interactions.</li> <li>File: <code>virechana_sheets_api.dart</code> handles the integration with Google Sheets for storing form data.</li> </ul>"},{"location":"folder_structure/#model","title":"<code>model/</code>","text":"<ul> <li>Purpose: Defines data models used in the app.</li> <li>File: <code>user.dart</code> represents the structure of a user's data.</li> </ul>"},{"location":"folder_structure/#screens","title":"<code>screens/</code>","text":"<ul> <li>Purpose: Contains the UI and logic for each individual screen.</li> <li>Key Files:</li> <li><code>page1_patient_details.dart</code>: Form for patient details.</li> <li><code>page2_purvakarma.dart</code>: Form for Purvakarma assessment.</li> <li><code>page3_pradhana_karma.dart</code>: Tracks vitals during Pradhana Karma.</li> <li><code>page4_shuddhi_assessment.dart</code>: Shuddhi Assesments sections.</li> <li><code>page5_samyaka.dart</code>: Samyak Yoga Lakshana Assessment.</li> <li><code>page6_ayoga.dart</code>: Ayoga of Virechana Assessment.</li> <li><code>page7_atiyoga.dart</code>: Atiyoga of Virechana Assessment.</li> <li><code>page6_post_procedure.dart</code>: Post Procedure Assessment Details.</li> <li><code>page6_summary.dart</code>: Summary of Assessment.</li> </ul>"},{"location":"folder_structure/#state","title":"<code>state/</code>","text":"<ul> <li>Purpose: Manages app-wide and screen-specific states.</li> <li>Key Files:</li> <li><code>form_state.dart</code>: Global state for form management.</li> <li><code>samyak_state.dart</code>: State management for the Samyak screen.</li> <li><code>Ayoga_state.dart</code>: State management for the Ayoga screen.</li> <li><code>Atiyoga_state.dart</code>: State management for the Atiyoga screen.</li> </ul>"},{"location":"folder_structure/#widgets","title":"<code>widgets/</code>","text":"<ul> <li>Purpose: Houses reusable UI components.</li> <li>File: <code>form_widgets.dart</code> contains shared widgets like dropdowns, input fields, etc.</li> </ul>"},{"location":"folder_structure/#maindart","title":"<code>main.dart</code>","text":"<p>Purpose: Entry point of the app.</p> <p>Functionality:</p> <ul> <li>Initializes the app.</li> <li>Configures routing and theme.</li> </ul> <p>This folder structure ensures the app is modular, easy to maintain, and scalable for future enhancements.</p>"},{"location":"form_state/","title":"Form State Management","text":"<p>This documentation explains the implementation of the <code>FormState</code> class and its role in managing the state of form data throughout the Virechana Assessment App. The state is managed using Riverpod, enabling reactive updates and centralized control of data.</p>"},{"location":"form_state/#overview","title":"Overview","text":"<p>The <code>FormState</code> class:</p> <ul> <li>Manages all form data in a centralized state.</li> <li>Supports updates, resets, and management of dynamic fields such as Vega entries.</li> <li>Integrates seamlessly with the app using Riverpod's <code>StateNotifierProvider</code>.</li> </ul>"},{"location":"form_state/#key-features","title":"Key Features","text":"<p>Centralized State Management</p> <ul> <li>Holds data for all pages, including patient details, assessment metrics, and post-procedure data.</li> <li>Provides a consistent interface for accessing and updating form fields.</li> </ul> <p>Dynamic Data Handling</p> <ul> <li>Manages dynamically generated fields like Vega entries for hourly charting.</li> </ul> <p>Real-Time State Updates</p> <ul> <li>Allows updates to individual fields or calculated scores.</li> <li>Changes are reflected immediately across the app.</li> </ul> <p>Reset Functionality</p> <ul> <li>Provides a method to reset all form data to default values.</li> </ul> <p>Integration with Riverpod</p> <ul> <li>Uses <code>StateNotifierProvider</code> for state management.</li> </ul>"},{"location":"form_state/#code-breakdown","title":"Code Breakdown","text":""},{"location":"form_state/#class-declaration","title":"Class Declaration","text":"<pre><code>class FormState extends StateNotifier&lt;Map&lt;String, dynamic&gt;&gt; {\n  FormState()\n      : super({\n          // Default values for form fields\n          'patient_name': '',\n          'uhid_no': '',\n          'age': '',\n          // Other fields...\n          'vega_entries': [],\n        });\n}\n</code></pre> <ul> <li>Inherits from <code>StateNotifier</code> to enable reactive state management.</li> <li>Initializes the state with default values.</li> </ul>"},{"location":"form_state/#state-management-methods","title":"State Management Methods","text":""},{"location":"form_state/#reset-form","title":"Reset Form","text":"<p>Resets all form fields to their default values:</p> <pre><code>void resetForm() {\n  state = {\n    'patient_name': '',\n    'uhid_no': '',\n    'age': '',\n    // Other fields...\n    'vega_entries': [],\n  };\n}\n</code></pre>"},{"location":"form_state/#update-field","title":"Update Field","text":"<p>Updates a specific field in the form state:</p> <pre><code>void updateField(String key, dynamic value) {\n  state = {...state, key: value};\n}\n</code></pre>"},{"location":"form_state/#update-score","title":"Update Score","text":"<p>Updates calculated scores for specific fields:</p> <pre><code>void updateScore(String key, int score) {\n  state = {...state, '${key}_score': score};\n}\n</code></pre>"},{"location":"form_state/#toggle-symptom","title":"Toggle Symptom","text":"<p>Toggles the state of a checkbox or boolean field:</p> <pre><code>void toggleSymptom(String symptom) {\n  state = {\n    ...state,\n    symptom: !(state[symptom] ?? false),\n  };\n}\n</code></pre>"},{"location":"form_state/#dynamic-vega-entry-management","title":"Dynamic Vega Entry Management","text":"<p>Add New Vega Entry Adds a new row for Vega charting:</p> <pre><code>void addVegaEntry() {\n  state = {\n    ...state,\n    'vega_entries': [\n      ...state['vega_entries'],\n      {\n        'timeController': TextEditingController(),\n        'vegaController': TextEditingController(),\n        'upavegaController': TextEditingController(),\n        'bpSystolicController': TextEditingController(),\n        'bpDiastolicController': TextEditingController(),\n        'pulseController': TextEditingController(),\n        'spo2Controller': TextEditingController(),\n        'remarksController': TextEditingController(),\n      },\n    ],\n  };\n}\n</code></pre> <p>Update Vega Entry Time</p> <p>Updates the time field of a specific Vega entry:</p> <pre><code>void updateVegaEntryTime(int index, String time) {\n  final updatedVegaEntries = List.from(state['vega_entries']);\n  updatedVegaEntries[index]['timeController'].text = time;\n\n  state = {\n    ...state,\n    'vega_entries': updatedVegaEntries,\n  };\n}\n</code></pre>"},{"location":"form_state/#integration-with-riverpod","title":"Integration with Riverpod","text":""},{"location":"form_state/#form-state-provider","title":"Form State Provider","text":"<p>The <code>formProvider</code> is a <code>StateNotifierProvider</code> that provides access to the <code>FormState</code> class:</p> <pre><code>final formProvider =\n    StateNotifierProvider&lt;FormState, Map&lt;String, dynamic&gt;&gt;((ref) {\n  return FormState();\n});\n</code></pre>"},{"location":"form_state/#user-state-provider","title":"User State Provider","text":"<p>Manages the <code>User</code> object:</p> <pre><code>final userProvider = StateProvider&lt;User?&gt;((ref) =&gt; null);\n</code></pre>"},{"location":"form_state/#disposal-of-resources","title":"Disposal of Resources","text":"<p>Ensures all <code>TextEditingController</code> instances are disposed of properly:</p> <pre><code>@override\nvoid dispose() {\n  state.values.whereType&lt;TextEditingController&gt;().forEach((controller) {\n    controller.dispose();\n  });\n  super.dispose();\n}\n</code></pre>"},{"location":"form_state/#usage","title":"Usage","text":""},{"location":"form_state/#accessing-form-data","title":"Accessing Form Data","text":"<p>To access form data:</p> <pre><code>final formData = ref.watch(formProvider);\n</code></pre>"},{"location":"form_state/#updating-form-data","title":"Updating Form Data","text":"<p>To update a field:</p> <pre><code>ref.read(formProvider.notifier).updateField('patient_name', 'John Doe');\n</code></pre>"},{"location":"form_state/#resetting-form-data","title":"Resetting Form Data","text":"<p>To reset the form:</p> <pre><code>ref.read(formProvider.notifier).resetForm();\n</code></pre>"},{"location":"form_state/#adding-a-vega-entry","title":"Adding a Vega Entry","text":"<p>To add a new Vega entry:</p> <pre><code>ref.read(formProvider.notifier).addVegaEntry();\n</code></pre>"},{"location":"form_state/#conclusion","title":"Conclusion","text":"<p>The <code>FormState</code> class provides a robust and flexible way to manage form data in the Virechana Assessment App. Its integration with Riverpod ensures real-time updates, while its methods support dynamic data handling and efficient state management.</p>"},{"location":"getting_started/","title":"Getting Started","text":"<p>Welcome to the Virechana Assessment App Documentation! This guide will help you set up and run the application on your local system.</p>"},{"location":"getting_started/#prerequisites","title":"Prerequisites","text":"<p>Before getting started, ensure you have the following:</p> <ul> <li>Flutter SDK: Installed and properly set up on your system.</li> <li>Google Sheets API Credentials: Obtain and configure credentials to enable integration with Google Sheets.</li> </ul>"},{"location":"getting_started/#installation","title":"Installation","text":"<p>Follow these steps to set up the project:</p> <ol> <li>Clone the Repository    Clone the project repository from GitHub using the following command:</li> </ol> <p><code>git clone https://github.com/ritchi-e/virechana-App</code></p> <ol> <li>Navigate to the Project Directory    Move into the project folder:</li> </ol> <p><code>cd virechana-App</code></p> <ol> <li>Install Dependencies    Fetch and install all required dependencies using Flutter:</li> </ol> <p><code>flutter pub get</code></p> <ol> <li> <p>Configure Google Sheets API</p> </li> <li> <p>Open the file <code>lib/api/virechana_sheets_api.dart</code>.</p> </li> <li>Replace the placeholders with your Google Sheets API credentials:<ul> <li>Spreadsheet ID</li> <li>API Key</li> </ul> </li> </ol> <p>For more details on setting up the Google Sheets API, refer to the official guide.</p>"},{"location":"getting_started/#running-the-app","title":"Running the App","text":"<p>To run the app on your local machine, follow these steps:</p> <ol> <li> <p>Connect a Device or Start an Emulator    Ensure a physical device or emulator is connected and ready for deployment.</p> </li> <li> <p>Run the Application    Execute the following command in the terminal from the project directory:</p> </li> </ol> <p><code>bash    flutter run</code></p> <p>This will launch the app on the connected device or emulator.</p>"},{"location":"getting_started/#troubleshooting","title":"Troubleshooting","text":"<ul> <li>If you encounter errors, verify your Flutter installation using:</li> </ul> <p><code>bash   flutter doctor</code></p> <ul> <li>Ensure your Google Sheets API credentials are correctly configured.</li> <li>Refer to the Flutter documentation for additional help.</li> </ul> <p>You're now ready to use the Virechana Assessment App! If you have further questions, feel free to consult the API Integration or State Management sections of this documentation.</p> <pre><code>\n</code></pre>"},{"location":"patient_details/","title":"Patient Details Page","text":"<p>The <code>PatientDetailsPage</code> is the first page in the Virechana Assessment App, where users input essential patient information such as name, age, UHID, and diagnosis details. This page also validates the input and saves the data for later use in the application.</p>"},{"location":"patient_details/#overview","title":"Overview","text":"<p>This page is implemented as a <code>ConsumerStatefulWidget</code> to allow dynamic updates to the form fields using the Riverpod state management library. It collects the following patient details:</p> <ul> <li>Patient Name</li> <li>UHID Number</li> <li>Age</li> <li>Sex</li> <li>OPD Number</li> <li>Diagnosis</li> <li>Date of Visit</li> </ul>"},{"location":"patient_details/#key-features","title":"Key Features","text":"<ol> <li> <p>Form Validation :    Ensures all fields are filled with valid input. It also provides meaningful error messages for invalid inputs.</p> </li> <li> <p>Dynamic State Management :    Uses Riverpod's <code>formProvider</code> to manage and update form data dynamically.</p> </li> <li> <p>Date Picker :    Allows users to select the date of visit using a calendar picker.</p> </li> <li> <p>Navigation :    Includes a <code>Next</code> button to proceed to the next page after successful validation.</p> </li> </ol>"},{"location":"patient_details/#code-breakdown","title":"Code Breakdown","text":""},{"location":"patient_details/#class-declaration","title":"Class Declaration","text":"<pre><code>class PatientDetailsPage extends ConsumerStatefulWidget {\n  final PageController controller;\n\n  PatientDetailsPage({required this.controller});\n\n  @override\n  _PatientDetailsPageState createState() =&gt; _PatientDetailsPageState();\n}\n</code></pre> <p>Inherits from <code>ConsumerStatefulWidget</code> to enable Riverpod integration.</p> <p>Accepts a <code>PageController</code> to handle navigation between pages.</p>"},{"location":"patient_details/#state-initialization","title":"State Initialization","text":"<pre><code>class _PatientDetailsPageState extends ConsumerState&lt;PatientDetailsPage&gt; {\n  late TextEditingController dateController;\n  late TextEditingController patientNameController;\n  late TextEditingController uhidController;\n  late TextEditingController ageController;\n  late TextEditingController opdNoController;\n  late TextEditingController diagnosisController;\n\n  String selectedSex = \"Male\";\n  DateTime? selectedDate;\n\n  @override\n  void initState() {\n    super.initState();\n    final formData = ref.read(formProvider);\n\n    dateController = TextEditingController(text: formData['date']);\n    patientNameController =\n        TextEditingController(text: formData['patient_name']);\n    uhidController = TextEditingController(text: formData['uhid_no']);\n    ageController = TextEditingController(text: formData['age']);\n    opdNoController = TextEditingController(text: formData['opd_no']);\n    diagnosisController = TextEditingController(text: formData['diagnosis']);\n    selectedSex = formData['sex'] ?? \"Male\";\n  }\n\n  @override\n  void dispose() {\n    dateController.dispose();\n    patientNameController.dispose();\n    uhidController.dispose();\n    ageController.dispose();\n    opdNoController.dispose();\n    diagnosisController.dispose();\n    super.dispose();\n  }\n}\n</code></pre> <p>Initializes <code>TextEditingController</code> for each form field using existing data from <code>formProvider</code>.</p> <p>Disposes of controllers when the widget is removed to free memory.</p>"},{"location":"patient_details/#form-input-fields","title":"Form Input Fields","text":""},{"location":"patient_details/#patient-name","title":"Patient Name","text":"<pre><code>LabeledTextFormField(\n  label: 'Patient Name',\n  controller: patientNameController,\n  onChanged: (value) {\n    ref.read(formProvider.notifier).updateField('patient_name', value);\n  },\n),\n</code></pre> <p>Collects and updates the patient's name dynamically.</p>"},{"location":"patient_details/#uhid-number","title":"UHID Number","text":"<pre><code>LabeledTextFormField(\n  label: 'UHID No',\n  controller: uhidController,\n  onChanged: (value) {\n    ref.read(formProvider.notifier).updateField('uhid_no', value);\n  },\n),\n</code></pre> <p>Accepts a numeric unique hospital ID.</p>"},{"location":"patient_details/#age","title":"Age","text":"<pre><code>LabeledTextFormField(\n  label: 'Age',\n  controller: ageController,\n  onChanged: (value) {\n    ref.read(formProvider.notifier).updateField('age', value);\n  },\n),\n</code></pre> <p>Validates that age is a positive integer within a reasonable range.</p>"},{"location":"patient_details/#sex","title":"Sex","text":"<pre><code>DropdownButtonFormField&lt;String&gt;(\n  value: selectedSex,\n  items: ['Male', 'Female', 'Other'].map((String value) {\n    return DropdownMenuItem&lt;String&gt;(\n      value: value,\n      child: Text(value),\n    );\n  }).toList(),\n  onChanged: (value) {\n    setState(() {\n      selectedSex = value!;\n      ref.read(formProvider.notifier).updateField('sex', selectedSex);\n    });\n  },\n  decoration: InputDecoration(labelText: 'Sex'),\n),\n</code></pre> <p>Provides a dropdown for selecting the patient's gender.</p>"},{"location":"patient_details/#opd-number","title":"OPD Number","text":"<pre><code>LabeledTextFormField(\n  label: 'OPD No.',\n  controller: opdNoController,\n  onChanged: (value) {\n    ref.read(formProvider.notifier).updateField('opd_no', value);\n  },\n),\n</code></pre>"},{"location":"patient_details/#diagnosis","title":"Diagnosis","text":"<pre><code>LabeledTextFormField(\n  label: 'Diagnosis',\n  controller: diagnosisController,\n  onChanged: (value) {\n    ref.read(formProvider.notifier).updateField('diagnosis', value);\n  },\n),\n</code></pre> <p>Collects the diagnosis information.</p>"},{"location":"patient_details/#date-picker","title":"Date Picker","text":"<pre><code>Future&lt;void&gt; _selectDate(BuildContext context) async {\n  final DateTime? pickedDate = await showDatePicker(\n    context: context,\n    initialDate: DateTime.now(),\n    firstDate: DateTime(1900),\n    lastDate: DateTime.now(),\n  );\n\n  if (pickedDate != null &amp;&amp; pickedDate != selectedDate) {\n    setState(() {\n      selectedDate = pickedDate;\n    });\n    ref.read(formProvider.notifier).updateField(\n        'visit_date', \"${pickedDate.day}/${pickedDate.month}/${pickedDate.year}\");\n  }\n}\n</code></pre> <p>Allows users to select a date of visit using a date picker dialog.</p>"},{"location":"patient_details/#form-validation-and-submission","title":"Form Validation and Submission","text":"<pre><code>ElevatedButton(\n  onPressed: () {\n    final String patientName = patientNameController.text.trim();\n    final String uhid = uhidController.text.trim();\n    final String age = ageController.text.trim();\n    final String opdNo = opdNoController.text.trim();\n    final String diagnosis = diagnosisController.text.trim();\n\n    if (patientName.isEmpty || !RegExp(r\"^[a-zA-Z\\s]+$\").hasMatch(patientName)) {\n      _showError(context, 'Enter a valid Patient Name (letters only).');\n    } else if (uhid.isEmpty || int.tryParse(uhid) == null) {\n      _showError(context, 'Enter a valid numeric UHID No.');\n    } else if (age.isEmpty || int.tryParse(age) == null ||\n        int.parse(age) &lt;= 0 || int.parse(age) &gt; 120) {\n      _showError(context, 'Enter a valid Age (between 1 and 120).');\n    } else if (opdNo.isEmpty || int.tryParse(opdNo) == null) {\n      _showError(context, 'Enter a valid numeric OPD No.');\n    } else if (diagnosis.isEmpty || diagnosis.length &gt; 100) {\n      _showError(context, 'Enter a valid Diagnosis (max 100 characters).');\n    } else if (selectedDate == null) {\n      _showError(context, 'Please select a Visit Date.');\n    } else {\n      // Save the data and navigate to the next page\n      final DateFormat dateFormat = DateFormat('dd/MM/yyyy');\n      final formattedDate = dateFormat.format(selectedDate!);\n\n      ref.read(formProvider.notifier).updateField('visit_date', formattedDate);\n      ref.read(formProvider.notifier).updateField('patient_name', patientName);\n      ref.read(formProvider.notifier).updateField('uhid_no', uhid);\n      ref.read(formProvider.notifier).updateField('age', age);\n      ref.read(formProvider.notifier).updateField('opd_no', opdNo);\n      ref.read(formProvider.notifier).updateField('diagnosis', diagnosis);\n      ref.read(formProvider.notifier).updateField('sex', selectedSex);\n\n      widget.controller.nextPage(\n        duration: Duration(milliseconds: 300),\n        curve: Curves.easeInOut,\n      );\n    }\n  },\n  child: Text('Next'),\n),\n</code></pre> <p>Validates the form inputs and displays error messages for invalid data.</p> <p>Updates the form state and navigates to the next page.</p>"},{"location":"patient_details/#conclusion","title":"Conclusion","text":"<p>The <code>PatientDetailsPage</code> ensures that patient data is collected accurately and stored dynamically in the state. The page is interactive and user-friendly, with proper validations and error handling to ensure the integrity of the input data.</p>"},{"location":"post_procedure/","title":"Post Procedure Page","text":"<p>The Post Procedure Page is a key component of the Virechana Assessment App, designed to collect data about the patient's condition post-procedure. It provides input fields for various metrics such as temperature, pulse rate, blood pressure, respiratory rate, weight, and complications.</p>"},{"location":"post_procedure/#overview","title":"Overview","text":"<p>Purpose: To record and manage post-procedure metrics for patients.</p> <p>Features:</p> <ul> <li>Input fields for key health parameters.</li> <li>Real-time state updates using Riverpod.</li> <li>Validations for numeric input formats.</li> <li>Easy navigation between pages.</li> </ul>"},{"location":"post_procedure/#key-features","title":"Key Features","text":"<p>Input Fields: Provides input fields for:</p> <ul> <li>Temperature (\u00b0F)</li> <li>Pulse Rate (bpm)</li> <li>Blood Pressure (Systolic/Diastolic in mmHg)</li> <li>Respiratory Rate (breaths/min)</li> <li>Weight (kg)</li> <li>Complications (if any)</li> </ul> <p>Real-Time State Updates</p> <ul> <li>Uses Riverpod's <code>StateNotifier</code> to update the app's state as the user inputs data.</li> </ul> <p>Validation</p> <ul> <li>Ensures inputs are in valid formats using <code>TextInputFormatter</code>:</li> <li>Allows only numeric or decimal inputs where applicable.</li> <li>Restricts inputs to valid characters for each field.</li> </ul> <p>Seamless Navigation</p> <ul> <li>Includes a Back button to navigate to the previous page.</li> <li>Includes a Next button to navigate to the next page.</li> </ul> <p>Responsive Design</p> <ul> <li>Layout adjusts to different screen sizes and provides a scrollable interface for smaller devices.</li> </ul>"},{"location":"post_procedure/#code-breakdown","title":"Code Breakdown","text":""},{"location":"post_procedure/#class-declaration","title":"Class Declaration","text":"<pre><code>class PostProcedurePage extends ConsumerStatefulWidget {\n  final PageController controller;\n\n  PostProcedurePage({required this.controller});\n\n  @override\n  _PostProcedurePageState createState() =&gt; _PostProcedurePageState();\n}\n</code></pre> <ul> <li>The page is implemented as a <code>ConsumerStatefulWidget</code> to manage UI state dynamically.</li> <li>Accepts a <code>PageController</code> for managing navigation between pages.</li> </ul>"},{"location":"post_procedure/#state-initialization","title":"State Initialization","text":"<p>The <code>initState</code> method initializes the text controllers with data from the form state:</p> <pre><code>@override\nvoid initState() {\n  super.initState();\n  final formData = ref.read(formProvider);\n\n  temperatureController = TextEditingController(text: formData['post_procedural_temp']);\n  pulseRateController = TextEditingController(text: formData['post_procedural_pulse']);\n  bpSystolicController = TextEditingController(text: formData['post_procedural_bp_systolic']);\n  bpDiastolicController = TextEditingController(text: formData['post_procedural_bp_diastolic']);\n  respRateController = TextEditingController(text: formData['post_procedural_resp']);\n  weightController = TextEditingController(text: formData['post_procedural_weight']);\n  complicationsController = TextEditingController(text: formData['post_procedural_complications']);\n}\n</code></pre> <ul> <li>Initializes the text controllers with the existing data from the <code>formProvider</code>.</li> </ul>"},{"location":"post_procedure/#input-fields","title":"Input Fields","text":"<p>Each input field is created using the <code>LabeledTextFormField</code> widget for consistency and ease of use.</p>"},{"location":"post_procedure/#example-temperature-field","title":"Example: Temperature Field","text":"<pre><code>LabeledTextFormField(\n  label: 'Temperature (\u00b0F)',\n  controller: temperatureController,\n  keyboardType: TextInputType.numberWithOptions(decimal: true),\n  inputFormatters: [\n    FilteringTextInputFormatter.allow(RegExp(r'^\\d*\\.?\\d*$'))\n  ],\n  onChanged: (value) =&gt; ref\n      .read(formProvider.notifier)\n      .updateField('post_procedural_temp', value),\n),\n</code></pre> <ul> <li><code>label</code>: Describes the field.</li> <li><code>controller</code>: Binds the text field to the state.</li> <li><code>keyboardType</code>: Specifies the input type (numeric or decimal).</li> <li><code>inputFormatters</code>: Ensures valid input (e.g., numeric only).</li> <li><code>onChanged</code>: Updates the app state whenever the field value changes.</li> </ul>"},{"location":"post_procedure/#navigation-buttons","title":"Navigation Buttons","text":""},{"location":"post_procedure/#back-button","title":"Back Button","text":"<pre><code>IconButton(\n  icon: Icon(Icons.arrow_back),\n  onPressed: () {\n    widget.controller.previousPage(\n      duration: Duration(milliseconds: 300),\n      curve: Curves.easeInOut,\n    );\n  },\n),\n</code></pre> <ul> <li>Navigates to the previous page.</li> </ul>"},{"location":"post_procedure/#next-button","title":"Next Button","text":"<pre><code>ElevatedButton(\n  onPressed: () {\n    widget.controller.nextPage(\n      duration: Duration(milliseconds: 300),\n      curve: Curves.easeInOut,\n    );\n  },\n  child: Text('Next'),\n),\n</code></pre> <ul> <li>Navigates to the next page.</li> </ul>"},{"location":"post_procedure/#usage","title":"Usage","text":""},{"location":"post_procedure/#state-updates","title":"State Updates","text":"<p>The app state is updated in real-time whenever a field value changes:</p> <pre><code>ref\n  .read(formProvider.notifier)\n  .updateField('post_procedural_temp', value);\n</code></pre>"},{"location":"post_procedure/#input-validations","title":"Input Validations","text":"<p>Validations ensure only valid data is entered into the input fields:</p> <ul> <li>Temperature and Weight: Allow numeric inputs, including decimals.</li> <li>Pulse Rate, Blood Pressure, and Respiratory Rate: Allow only integer values.</li> </ul>"},{"location":"post_procedure/#conclusion","title":"Conclusion","text":"<p>The Post Procedure Page provides an intuitive interface for recording post-procedure metrics. With its real-time state management, input validations, and seamless navigation, it plays a crucial role in ensuring accurate and reliable data collection within the Virechana Assessment App.</p>"},{"location":"pradhana_karma/","title":"Pradhana Karma Page","text":"<p>The <code>Pradhana Karma</code> page collects detailed information about vital parameters, physical examinations, and Vega-related entries during the Pradhana Karma process. It ensures accurate data collection with proper validation and allows dynamic additions of Vega details.</p>"},{"location":"pradhana_karma/#overview","title":"Overview","text":"<ul> <li>Purpose: Collect key vital signs, physical examination details, and Vega entries for the Pradhana Karma process.</li> <li>Features:</li> <li>Input fields for vital parameters such as temperature, pulse rate, BP, and SpO2.</li> <li>Dynamic addition of Vega entries with time and remarks.</li> <li>Integration with Riverpod for state management.</li> <li>Proper input validation using input formatters.</li> </ul>"},{"location":"pradhana_karma/#key-features","title":"Key Features","text":"<ol> <li> <p>Vital Parameters Collection     Includes fields to collect:</p> <pre><code> Temperature (\u00b0F)\n\n Pulse Rate (bpm)\n\n Blood Pressure (Systolic and Diastolic in mmHg)\n\n Respiratory Rate (breaths/min)\n\n Weight (kg)\n\n SpO2 (Oxygen saturation in %)\n</code></pre> </li> <li> <p>Dynamic Vega Entry Management</p> <p>Provides dynamic rows for Vega details.</p> <p>Allows time selection using a time picker.</p> <p>Supports adding new Vega entry rows dynamically.</p> </li> <li> <p>Real-Time State Updates</p> <p>Uses Riverpod's <code>formProvider</code> to handle real-time updates to the form state.</p> </li> <li> <p>Validation</p> <p>Input formatters ensure only valid data is entered in numeric fields.</p> </li> <li> <p>Navigation</p> <p>Includes Back and Next buttons for seamless page navigation.</p> </li> </ol>"},{"location":"pradhana_karma/#code-breakdown","title":"Code Breakdown","text":""},{"location":"pradhana_karma/#class-declaration","title":"Class Declaration","text":"<pre><code>class PradhanaKarmaPage extends ConsumerStatefulWidget {\n  final PageController controller;\n\n  PradhanaKarmaPage({required this.controller});\n\n  @override\n  _PradhanaKarmaPageState createState() =&gt; _PradhanaKarmaPageState();\n}\n</code></pre> <ul> <li>Inherits from <code>ConsumerStatefulWidget</code> to leverage Riverpod for state management.</li> <li>Accepts a <code>PageController</code> for navigation.</li> </ul>"},{"location":"pradhana_karma/#state-initialization","title":"State Initialization","text":"<pre><code>@override\nvoid initState() {\n  super.initState();\n  final formData = ref.read(formProvider);\n\n  // Initialize controllers with the form data\n  temperatureController = TextEditingController(text: formData['temperature']);\n  pulseRateController = TextEditingController(text: formData['pulse_rate']);\n  bpSystolicController = TextEditingController(text: formData['bp_systolic']);\n  bpDiastolicController = TextEditingController(text: formData['bp_diastolic']);\n  rrController = TextEditingController(text: formData['rr']);\n  spo2Controller = TextEditingController(text: formData['spo2']);\n  weightController = TextEditingController(text: formData['weight']);\n  peController = TextEditingController(text: formData['pe']);\n}\n</code></pre> <ul> <li>Initializes text controllers with existing form data using <code>formProvider</code>.</li> </ul>"},{"location":"pradhana_karma/#input-fields","title":"Input Fields","text":""},{"location":"pradhana_karma/#vital-parameters","title":"Vital Parameters","text":"<ul> <li>Temperature:</li> </ul> <pre><code>LabeledTextFormField(\n  label: 'Temperature (\u00b0F)',\n  controller: temperatureController,\n  keyboardType: TextInputType.numberWithOptions(decimal: true),\n  inputFormatters: [\n    FilteringTextInputFormatter.allow(RegExp(r'^\\d*\\.?\\d*$'))\n  ],\n  onChanged: (value) {\n    ref.read(formProvider.notifier).updateField('temperature', value);\n  },\n),\n</code></pre> <ul> <li>Pulse Rate:</li> </ul> <pre><code>LabeledTextFormField(\n  label: 'Pulse Rate (bpm)',\n  controller: pulseRateController,\n  keyboardType: TextInputType.number,\n  inputFormatters: [FilteringTextInputFormatter.digitsOnly],\n  onChanged: (value) {\n    ref.read(formProvider.notifier).updateField('pulse_rate', value);\n  },\n),\n</code></pre> <ul> <li>Blood Pressure:</li> </ul> <pre><code>Row(\n  children: [\n    Expanded(\n      child: LabeledTextFormField(\n        label: 'BP Systolic (mmHg)',\n        controller: bpSystolicController,\n        keyboardType: TextInputType.number,\n        inputFormatters: [FilteringTextInputFormatter.digitsOnly],\n        onChanged: (value) {\n          ref.read(formProvider.notifier).updateField('bp_systolic', value);\n        },\n      ),\n    ),\n    SizedBox(width: 10),\n    Expanded(\n      child: LabeledTextFormField(\n        label: 'BP Diastolic (mmHg)',\n        controller: bpDiastolicController,\n        keyboardType: TextInputType.number,\n        inputFormatters: [FilteringTextInputFormatter.digitsOnly],\n        onChanged: (value) {\n          ref.read(formProvider.notifier).updateField('bp_diastolic', value);\n        },\n      ),\n    ),\n  ],\n),\n</code></pre> <ul> <li>Respiratory Rate, Weight, SpO2, and Physical Examination follow similar patterns.</li> </ul>"},{"location":"pradhana_karma/#dynamic-vega-entry-management","title":"Dynamic Vega Entry Management","text":""},{"location":"pradhana_karma/#list-of-vega-entries","title":"List of Vega Entries","text":"<pre><code>SizedBox(\n  height: 200,\n  child: ListView.builder(\n    itemCount: formData['vega_entries']?.length ?? 0,\n    itemBuilder: (context, index) {\n      final entry = formData['vega_entries'][index];\n      return Row(\n        children: [\n          Expanded(\n            child: TextFormField(\n              controller: entry['timeController'],\n              decoration: InputDecoration(labelText: 'Time (HH:MM)'),\n              readOnly: true,\n              onTap: () =&gt; _selectTime(index),\n            ),\n          ),\n          Expanded(\n            child: TextFormField(\n              controller: entry['vegaController'],\n              decoration: InputDecoration(labelText: 'Vega'),\n            ),\n          ),\n          // Additional fields for Vega details...\n        ],\n      );\n    },\n  ),\n),\n</code></pre> <ul> <li>Dynamically generates rows for Vega details.</li> <li>Uses <code>_selectTime</code> to open a time picker for selecting time.</li> </ul>"},{"location":"pradhana_karma/#add-vega-row","title":"Add Vega Row","text":"<pre><code>ElevatedButton(\n  onPressed: () {\n    ref.read(formProvider.notifier).addVegaEntry();\n  },\n  child: Text('Add Row'),\n),\n</code></pre> <ul> <li>Adds a new row dynamically for Vega details.</li> </ul>"},{"location":"pradhana_karma/#navigation-buttons","title":"Navigation Buttons","text":"<ul> <li>Back Button:</li> </ul> <pre><code>IconButton(\n  icon: Icon(Icons.arrow_back),\n  onPressed: () {\n    widget.controller.previousPage(\n      duration: Duration(milliseconds: 300),\n      curve: Curves.easeInOut,\n    );\n  },\n),\n</code></pre> <ul> <li>Next Button:</li> </ul> <pre><code>ElevatedButton(\n  onPressed: () {\n    widget.controller.nextPage(\n      duration: Duration(milliseconds: 300),\n      curve: Curves.easeInOut,\n    );\n  },\n  child: Text('Next Page'),\n),\n</code></pre>"},{"location":"pradhana_karma/#conclusion","title":"Conclusion","text":"<p>The <code>Pradhana Karma</code> page is a crucial component of the app, allowing users to input and manage detailed information about the Pradhana Karma process. With dynamic Vega entries, proper validation, and integration with Riverpod, it ensures accurate and efficient data handling.</p>"},{"location":"purvakarma/","title":"Purvakarma Assessment Page","text":"<p>The <code>PurvakarmaPage</code> collects and assesses data about the Purvakarma process, specifically focusing on the evaluation of Koshta through a series of dropdown fields with scores. It calculates a total score dynamically and classifies the Koshta based on predefined thresholds.</p>"},{"location":"purvakarma/#overview","title":"Overview","text":"<p>Purpose: To assess Koshta (digestive strength and bowel habits) based on various criteria such as frequency, consistency, urgency, experience, and Snigdha Lakshana.</p> <p>Features:</p> <p>Dropdowns for each assessment criterion with predefined scores.</p> <p>Dynamic total score calculation based on selected options.</p> <p>Koshta classification based on the total score.</p> <p>Navigation buttons to move between pages.</p>"},{"location":"purvakarma/#key-features","title":"Key Features","text":"<ol> <li> <p>Dynamic Dropdown Fields    Each dropdown represents an assessment criterion, allowing users to select an option with an associated score.    Updates the state dynamically when an option is selected.</p> </li> <li> <p>Total Score Calculation    Automatically calculates the total score based on selected dropdown options.</p> </li> <li> <p>Koshta Classification    Classifies Koshta into Krura, Madhyama, or Mridu based on the total score.</p> </li> <li> <p>Responsive Design    Adapts to different screen sizes using <code>MediaQuery</code> for consistent UI.</p> </li> <li> <p>Navigation    Back and Next buttons for seamless navigation between pages.</p> </li> </ol>"},{"location":"purvakarma/#code-breakdown","title":"Code Breakdown","text":""},{"location":"purvakarma/#class-declaration","title":"Class Declaration","text":"<pre><code>class PurvakarmaPage extends ConsumerStatefulWidget {\n  final PageController controller;\n\n  PurvakarmaPage({required this.controller});\n\n  @override\n  _PurvakarmaPageState createState() =&gt; _PurvakarmaPageState();\n}\n</code></pre> <p>Inherits from <code>ConsumerStatefulWidget</code> to enable integration with Riverpod for state management. Accepts a <code>PageController</code> to handle navigation between pages.</p>"},{"location":"purvakarma/#dropdown-options","title":"Dropdown Options","text":"<p>Dropdown options are predefined for each assessment criterion, with associated labels and scores:</p> <pre><code>final dropdownOptions = {\n  'frequency_per_day': [\n    {'label': 'Less than one', 'score': 1},\n    {'label': 'Once/twice', 'score': 2},\n    {'label': 'More than 2', 'score': 3},\n  ],\n  'consistency': [\n    {'label': 'Hard stool', 'score': 1},\n    {'label': 'Soft well-formed', 'score': 2},\n    {'label': 'Loose/watery', 'score': 3},\n  ],\n  'urgency': [\n    {'label': 'No urgency', 'score': 1},\n    {'label': 'Moderate', 'score': 2},\n    {'label': 'Marked urgency', 'score': 3},\n  ],\n  'experience': [\n    {'label': 'No change in bowel', 'score': 1},\n    {'label': 'Normal stool', 'score': 2},\n    {'label': 'Watery stool', 'score': 3},\n  ],\n  'samyak_snigdha': [\n    {'label': 'More than 6 days', 'score': 3},\n    {'label': '4-5 days', 'score': 2},\n    {'label': 'Less than 3 days', 'score': 1},\n  ],\n};\n</code></pre> <p>These options are used to generate dropdown fields dynamically.</p>"},{"location":"purvakarma/#dropdown-implementation","title":"Dropdown Implementation","text":"<pre><code>...dropdownOptions.entries.map((entry) {\n  final key = entry.key;\n  final options = entry.value;\n\n  return Padding(\n    padding: EdgeInsets.symmetric(vertical: screenHeight * 0.01),\n    child: DropdownButtonFormField&lt;Map&lt;String, dynamic&gt;&gt;(\n      decoration: InputDecoration(\n        labelText: key.replaceAll('_', ' ').capitalize(),\n        border: OutlineInputBorder(),\n      ),\n      value: options.firstWhereOrNull(\n        (option) =&gt; option['label'] == formData[key],\n      ),\n      items: options\n          .map((option) =&gt; DropdownMenuItem&lt;Map&lt;String, dynamic&gt;&gt;(\n                value: option,\n                child: Text(\n                    '${option['label']} (Score: ${option['score']})'),\n              ))\n          .toList(),\n      onChanged: (value) {\n        if (value != null) {\n          ref.read(formProvider.notifier).updateField(key, value['label']);\n          ref.read(formProvider.notifier).updateScore(key, value['score']);\n          _updateTotalScore();\n        }\n      },\n    ),\n  );\n}).toList(),\n</code></pre> <p>Dynamically creates dropdown fields for all criteria.</p> <p>Updates the selected value and score in the <code>formProvider</code> state.</p>"},{"location":"purvakarma/#total-score-calculation","title":"Total Score Calculation","text":"<pre><code>void _updateTotalScore() {\n  final formData = ref.read(formProvider);\n  final totalScore = formData['frequency_per_day_score'] +\n      formData['consistency_score'] +\n      formData['urgency_score'] +\n      formData['experience_score'] +\n      formData['samyak_snigdha_score'];\n\n  ref.read(formProvider.notifier).updateField('Koshta_total_score', totalScore);\n}\n</code></pre> <p>Calculates the sum of all selected scores and updates the total score in the form state.</p>"},{"location":"purvakarma/#koshta-classification","title":"Koshta Classification","text":"<pre><code>Text(\n  'Koshtha Classification:',\n  style: TextStyle(\n    fontSize: screenWidth * 0.045,\n    fontWeight: FontWeight.bold,\n  ),\n),\nText(\n  '(1-5) Krura koshta\\n'\n  '(6-10) Madhyama koshta\\n'\n  '(11-15) Mridu koshta',\n  style: TextStyle(fontSize: screenWidth * 0.04),\n),\n</code></pre> <p>Displays the classification criteria for Koshta based on the total score.</p>"},{"location":"purvakarma/#navigation-buttons","title":"Navigation Buttons","text":""},{"location":"purvakarma/#back-button","title":"Back Button","text":"<pre><code>IconButton(\n  icon: Icon(Icons.arrow_back),\n  onPressed: () {\n    widget.controller.previousPage(\n      duration: Duration(milliseconds: 300),\n      curve: Curves.easeInOut,\n    );\n  },\n),\n</code></pre>"},{"location":"purvakarma/#next-button","title":"Next Button","text":"<pre><code>ElevatedButton(\n  onPressed: () {\n    widget.controller.nextPage(\n      duration: Duration(milliseconds: 300),\n      curve: Curves.easeInOut,\n    );\n  },\n  child: Text('Next'),\n),\n</code></pre> <p>Allows navigation between pages with smooth animations.</p>"},{"location":"purvakarma/#extensions","title":"Extensions","text":""},{"location":"purvakarma/#string-capitalization","title":"String Capitalization","text":"<pre><code>extension StringExtension on String {\n  String capitalize() {\n    return \"${this[0].toUpperCase()}${this.substring(1)}\";\n  }\n}\n</code></pre>"},{"location":"purvakarma/#find-first-element-or-null","title":"Find First Element or Null","text":"<pre><code>extension ListFirstWhereOrNull&lt;E&gt; on List&lt;E&gt; {\n  E? firstWhereOrNull(bool Function(E element) test) {\n    for (var element in this) {\n      if (test(element)) return element;\n    }\n    return null;\n  }\n}\n</code></pre> <p>Adds utility methods for string manipulation and safe list searches.</p>"},{"location":"purvakarma/#conclusion","title":"Conclusion","text":"<p>The <code>PurvakarmaPage</code> provides an intuitive and dynamic way to collect and assess Koshta data. It ensures accurate scoring, real-time updates to the state, and proper classification. This page is crucial for the Purvakarma assessment process in the app.</p>"},{"location":"samyak/","title":"Samyak Yoga Lakshana Page","text":"<p>The Samyak Yoga Lakshana Page is designed to collect and manage data about the Samyak Yoga Lakshana features. It allows users to toggle multiple checkboxes dynamically and ensures that the selections are updated in real-time using Riverpod for state management.</p>"},{"location":"samyak/#overview","title":"Overview","text":"<p>Purpose: Evaluate the presence of various Samyak Yoga Lakshana attributes using checkboxes.</p> <p>Features:</p> <ul> <li>Displays a list of checkbox options for Samyak Yoga Lakshana attributes.</li> <li>Updates the state dynamically when a checkbox is toggled.</li> <li>Integrates with the SamyakYogaState for efficient state management.</li> <li>Includes navigation to the next or previous pages.</li> </ul>"},{"location":"samyak/#key-features","title":"Key Features","text":"<ol> <li> <p>Dynamic Checkbox List:    Each Samyak Yoga Lakshana attribute is displayed as a checkbox. Toggling a checkbox updates its value in the state.</p> </li> <li> <p>Real-Time State Management: Uses Riverpod's <code>StateNotifierProvider</code> to manage and update checkbox states in real-time.</p> </li> <li> <p>Seamless Navigation: Includes Back and Next buttons for navigating between pages.</p> </li> <li> <p>Responsive UI: Ensures the layout is scrollable for smaller screens, providing a user-friendly experience.</p> </li> </ol>"},{"location":"samyak/#code-breakdown","title":"Code Breakdown","text":""},{"location":"samyak/#class-declaration","title":"Class Declaration","text":"<pre><code>class SamyakYogaLakshanaPage extends ConsumerWidget {\n  final PageController controller;\n\n  SamyakYogaLakshanaPage({required this.controller});\n\n  @override\n  Widget build(BuildContext context, WidgetRef ref) {\n    final samyakState = ref.watch(samyakYogaProvider);\n    // Rest of the code...\n  }\n}\n</code></pre> <ul> <li>Inherits from <code>ConsumerWidget</code> to enable integration with Riverpod.</li> <li>Accepts a <code>PageController</code> to manage navigation between pages.</li> </ul>"},{"location":"samyak/#checkbox-list","title":"Checkbox List","text":"<p>The checkboxes are generated dynamically based on the keys in the <code>samyakYogaProvider</code> state:</p> <pre><code>...samyakState.keys.map((option) {\n  return CheckboxListTile(\n    title: Text(option),\n    value: samyakState[option] ?? false,\n    onChanged: (bool? value) {\n      ref.read(samyakYogaProvider.notifier).toggleCheckbox(option, value);\n    },\n  );\n}).toList(),\n</code></pre> <ul> <li><code>title</code>: Displays the name of the Samyak Yoga Lakshana attribute.</li> <li><code>value</code>: Represents the current state of the checkbox.</li> <li><code>onChanged</code>: Toggles the checkbox state and updates it in the provider.</li> </ul>"},{"location":"samyak/#state-management","title":"State Management","text":"<p>The state is managed using Riverpod's <code>samyakYogaProvider</code>:</p> <pre><code>final samyakState = ref.watch(samyakYogaProvider);\n</code></pre> <ul> <li>The <code>samyakYogaProvider</code> holds the current state of all checkboxes.</li> <li>Changes to the checkboxes are handled by the <code>toggleCheckbox</code> method in the <code>SamyakYogaState</code> class.</li> </ul>"},{"location":"samyak/#navigation-buttons","title":"Navigation Buttons","text":""},{"location":"samyak/#back-button","title":"Back Button","text":"<pre><code>IconButton(\n  icon: Icon(Icons.arrow_back),\n  onPressed: () {\n    controller.previousPage(\n      duration: Duration(milliseconds: 300),\n      curve: Curves.easeInOut,\n    );\n  },\n),\n</code></pre> <ul> <li>Navigates to the previous page.</li> </ul>"},{"location":"samyak/#next-button","title":"Next Button","text":"<pre><code>ElevatedButton(\n  onPressed: () {\n    // Update the form with individual checkbox values\n    samyakState.forEach((key, value) {\n      ref.read(samyakYogaProvider.notifier).updateField(key, value);\n    });\n\n    // Navigate to the next page\n    controller.nextPage(\n      duration: Duration(milliseconds: 300),\n      curve: Curves.easeInOut,\n    );\n  },\n  child: Text('Next'),\n),\n</code></pre> <ul> <li>Updates the form state with the current checkbox values.</li> <li>Navigates to the next page.</li> </ul>"},{"location":"samyak/#usage","title":"Usage","text":""},{"location":"samyak/#state-initialization","title":"State Initialization","text":"<p>The initial state is defined in the <code>SamyakYogaState</code> class and includes the following attributes:</p> <ul> <li>Srotovishuddhi</li> <li>Vatanululomana</li> <li>Ruchi</li> <li>Laghuta</li> <li>Kayagni Anuvartana</li> <li>Varna Shuddhi</li> <li>Bhuddhi Shuddhi</li> <li>Samprasadana</li> </ul> <p>Each attribute is set to <code>false</code> by default.</p>"},{"location":"samyak/#state-updates","title":"State Updates","text":"<p>The state is updated dynamically when a checkbox is toggled:</p> <pre><code>ref.read(samyakYogaProvider.notifier).toggleCheckbox(option, value);\n</code></pre> <p><code>toggleCheckbox(String option, bool? value)</code>: Toggles the checkbox state for the given attribute.</p>"},{"location":"samyak/#state-watching","title":"State Watching","text":"<p>The <code>ref.watch</code> method ensures that the UI reflects the latest state:</p> <pre><code>final samyakState = ref.watch(samyakYogaProvider);\n</code></pre>"},{"location":"samyak/#conclusion","title":"Conclusion","text":"<p>The Samyak Yoga Lakshana Page provides an interactive and dynamic way to evaluate the presence of Samyak Yoga Lakshana attributes. By leveraging Riverpod for state management, it ensures real-time updates and a seamless user experience. This page is an essential component of the Virechana Assessment App, facilitating accurate data collection and evaluation.</p>"},{"location":"samyak_state/","title":"Samyak Yoga State Management","text":"<p>The SamyakYogaState class is responsible for managing the state of the checkboxes on the Samyak Yoga page. This state management solution is built using Riverpod's <code>StateNotifier</code> and ensures efficient and dynamic updates to the state.</p>"},{"location":"samyak_state/#overview","title":"Overview","text":"<ul> <li>Purpose: Track the state of multiple checkboxes related to Samyak Yoga features such as Srotovishuddhi, Vatanululomana, Ruchi, and more.</li> <li>Features:</li> <li>Initial state setup with default values.</li> <li>Methods to reset, update, and toggle individual checkbox states.</li> <li>Integrated with Riverpod to allow real-time state updates in the UI.</li> </ul>"},{"location":"samyak_state/#key-features","title":"Key Features","text":"<ol> <li> <p>Initial State Management: Initializes the state with all checkboxes set to <code>false</code>.It also includes the following fields:</p> <pre><code>Srotovishuddhi\nVatanululomana\nRuchi\nLaghuta\nKayagni Anuvartana\nVarna Shuddhi\nBhuddhi Shuddhi\nSamprasadana\n</code></pre> </li> <li> <p>State Manipulation Methods</p> <ul> <li><code>resetState()</code>: Resets all checkboxes to their initial <code>false</code> state.</li> <li><code>updateField(String key, dynamic value)</code>: Updates the value of a specific checkbox field.</li> <li><code>toggleCheckbox(String option, bool? value)</code>: Toggles the state of a specific checkbox based on the provided value.</li> </ul> </li> <li> <p>Riverpod Integration : Uses <code>StateNotifierProvider</code> to expose the state to the UI. It also allows real-time updates and dynamic state management.</p> </li> </ol>"},{"location":"samyak_state/#code-breakdown","title":"Code Breakdown","text":""},{"location":"samyak_state/#class-declaration","title":"Class Declaration","text":"<pre><code>class SamyakYogaState extends StateNotifier&lt;Map&lt;String, bool&gt;&gt; {\n  SamyakYogaState()\n      : super({\n          'Srotovishuddhi': false,\n          'vatanululomana': false,\n          'ruchi': false,\n          'laghuta': false,\n          'kayagni anuvartana': false,\n          'varna shuddhi': false,\n          'bhuddhi shuddhi': false,\n          'samprasadana': false,\n        });\n}\n</code></pre> <p>Inherits from <code>StateNotifier&lt;Map&lt;String, bool&gt;&gt;</code>.</p> <p>Initializes the state with default values for all checkboxes.</p>"},{"location":"samyak_state/#state-reset-method","title":"State Reset Method","text":"<pre><code>void resetState() {\n  state = {\n    'Srotovishuddhi': false,\n    'vatanululomana': false,\n    'ruchi': false,\n    'laghuta': false,\n    'kayagni anuvartana': false,\n    'varna shuddhi': false,\n    'bhuddhi shuddhi': false,\n    'samprasadana': false,\n  };\n}\n</code></pre> <ul> <li>Resets all fields to their default state (<code>false</code>).</li> </ul>"},{"location":"samyak_state/#state-update-method","title":"State Update Method","text":"<pre><code>void updateField(String key, dynamic value) {\n  state = {...state, key: value};\n}\n</code></pre> <ul> <li>Updates the value of a specific field in the state.</li> <li>Ensures immutability by creating a new state map using the spread operator.</li> </ul>"},{"location":"samyak_state/#checkbox-toggle-method","title":"Checkbox Toggle Method","text":"<pre><code>void toggleCheckbox(String option, bool? value) {\n  state = {\n    ...state,\n    option: value ?? false, // Toggle the current state of the checkbox\n  };\n}\n</code></pre> <ul> <li>Toggles the checkbox state for a specific field.</li> <li>If the <code>value</code> is <code>null</code>, the field defaults to <code>false</code>.</li> </ul>"},{"location":"samyak_state/#riverpod-provider","title":"Riverpod Provider","text":"<pre><code>final samyakYogaProvider = StateNotifierProvider&lt;SamyakYogaState, Map&lt;String, bool?&gt;&gt;(\n  (ref) =&gt; SamyakYogaState(),\n);\n</code></pre> <ul> <li>Creates a provider to expose the SamyakYogaState to the app.</li> <li>Allows the UI to subscribe to state changes and trigger updates dynamically.</li> </ul>"},{"location":"samyak_state/#usage","title":"Usage","text":""},{"location":"samyak_state/#accessing-the-state","title":"Accessing the State","text":"<pre><code>final samyakYogaState = ref.watch(samyakYogaProvider);\n</code></pre> <ul> <li>Use <code>ref.watch</code> to read the current state.</li> </ul>"},{"location":"samyak_state/#updating-the-state","title":"Updating the State","text":"<pre><code>ref.read(samyakYogaProvider.notifier).updateField('ruchi', true);\n</code></pre> <ul> <li>Updates the value of the Ruchi checkbox to <code>true</code>.</li> </ul>"},{"location":"samyak_state/#toggling-a-checkbox","title":"Toggling a Checkbox","text":"<pre><code>ref.read(samyakYogaProvider.notifier).toggleCheckbox('vatanululomana', true);\n</code></pre> <ul> <li>Toggles the state of the Vatanululomana checkbox.</li> </ul>"},{"location":"samyak_state/#resetting-the-state","title":"Resetting the State","text":"<pre><code>ref.read(samyakYogaProvider.notifier).resetState();\n</code></pre> <ul> <li>Resets all checkbox fields to their default values.</li> </ul>"},{"location":"samyak_state/#conclusion","title":"Conclusion","text":"<p>The SamyakYogaState provides a robust and efficient way to manage the state of checkboxes on the Samyak Yoga page. By leveraging Riverpod and <code>StateNotifier</code>, this implementation ensures real-time updates, state immutability, and seamless integration with the UI.</p>"},{"location":"shuddhi_assessment/","title":"Shuddhi Assessment Page","text":"<p>The Shuddhi Assessment Page evaluates the degree of detoxification achieved during the process. This page calculates a final score based on the responses to specific criteria and classifies the Shuddhi into categories such as Avara, Madhyama, or Pravara.</p>"},{"location":"shuddhi_assessment/#overview","title":"Overview","text":"<ul> <li>Purpose: Assess Shuddhi (purification) using three key factors: Antiki Shuddhi, Vaigiki Shuddhi, and Laingiki Shuddhi.</li> <li>Features:<pre><code>- Dropdown fields for each Shuddhi factor with predefined options.\n\n- Dynamic calculation of the final score.\n\n- Real-time classification of Shuddhi based on the score.\n\n- Integrated with Riverpod for state management.\n</code></pre> </li> </ul>"},{"location":"shuddhi_assessment/#key-features","title":"Key Features","text":"<ol> <li> <p>Shuddhi Factors     Collects data for:</p> <pre><code>Antiki Shuddhi: Determines the evacuation characteristics.\n\nVaigiki Shuddhi: Assesses the frequency of bowel movements.\n\nLaingiki Shuddhi: Evaluates other physical signs of detoxification.\n</code></pre> </li> <li> <p>Dynamic Final Score Calculation</p> <p>The final score is calculated by summing the scores of all three Shuddhi factors.</p> </li> <li> <p>Shuddhi Classification</p> <p>Based on the final score, the Shuddhi is classified as:</p> <pre><code>Avara Shuddhi (Score: 1-4)\nMadhyama Shuddhi (Score: 5-8)\nPravara Shuddhi (Score: 9-12)\n</code></pre> </li> <li> <p>Dropdown Options with Scoring</p> <p>Each dropdown option is associated with a specific score, ensuring consistent scoring for all factors.</p> </li> <li> <p>Real-Time State Updates     Automatically updates the state using Riverpod, ensuring the UI reflects the latest data.</p> </li> </ol>"},{"location":"shuddhi_assessment/#code-breakdown","title":"Code Breakdown","text":""},{"location":"shuddhi_assessment/#class-declaration","title":"Class Declaration","text":"<pre><code>class ShuddhiAssessmentPage extends ConsumerStatefulWidget {\n  final PageController controller;\n\n  ShuddhiAssessmentPage({required this.controller});\n\n  @override\n  _ShuddhiAssessmentPageState createState() =&gt; _ShuddhiAssessmentPageState();\n}\n</code></pre> <ul> <li>Accepts a <code>PageController</code> for managing navigation between pages.</li> <li>Uses <code>ConsumerStatefulWidget</code> for Riverpod integration.</li> </ul>"},{"location":"shuddhi_assessment/#state-initialization","title":"State Initialization","text":"<pre><code>@override\nvoid initState() {\n  super.initState();\n  final formData = ref.read(formProvider);\n  suddhiClassController = TextEditingController(text: formData['shuddhi_classification']);\n}\n</code></pre> <ul> <li>Initializes a <code>TextEditingController</code> for managing the Shuddhi classification field.</li> </ul>"},{"location":"shuddhi_assessment/#dropdown-implementation","title":"Dropdown Implementation","text":"<p>The page includes dropdown fields for each Shuddhi factor, dynamically created from a predefined set of options:</p> <pre><code>final dropdownOptions = {\n  'antiki_shuddhi': [\n    'Anila, Kapha, Pitta, Vita Nirgamana',\n    'Kapha, Pitta, Vita Nirgamana',\n    'No Kaphanta',\n  ],\n  'vaigiki_shuddhi': ['1-10', '11-20', '21-30 or &gt;30'],\n  'laingiki_shuddhi': ['2 or fewer criteria', '3-5 criteria', 'More than 5 criteria'],\n};\n</code></pre>"},{"location":"shuddhi_assessment/#example-dropdown","title":"Example Dropdown","text":"<pre><code>DropdownButtonFormField&lt;String&gt;(\n  decoration: InputDecoration(\n    labelText: key.replaceAll('_', ' ').capitalize(),\n    border: OutlineInputBorder(),\n  ),\n  value: formData[key],\n  items: options.map((option) =&gt; DropdownMenuItem&lt;String&gt;(\n        value: option,\n        child: Text(option),\n      )).toList(),\n  onChanged: (value) {\n    if (value != null) {\n      ref.read(formProvider.notifier).updateField(key, value);\n      final int score = _getScore(key, value);\n      ref.read(formProvider.notifier).updateScore(key, score);\n    }\n  },\n),\n</code></pre> <ul> <li>Label Text: Dynamically generated based on the field name.</li> <li>Options: Generated from the predefined <code>dropdownOptions</code>.</li> <li>State Updates: Updates the field value and score in the <code>formProvider</code>.</li> </ul>"},{"location":"shuddhi_assessment/#final-score-calculation","title":"Final Score Calculation","text":"<p>The final score is dynamically calculated based on the scores from all three Shuddhi factors:</p> <pre><code>final int finalScore = (formData['antiki_shuddhi_score'] ?? 0) +\n    (formData['vaigiki_shuddhi_score'] ?? 0) +\n    (formData['laingiki_shuddhi_score'] ?? 0);\n</code></pre>"},{"location":"shuddhi_assessment/#shuddhi-classification","title":"Shuddhi Classification","text":"<p>The classification is determined based on the final score using the following logic:</p> <pre><code>String getShuddhiClassification(int totalScore) {\n  if (totalScore &gt;= 1 &amp;&amp; totalScore &lt;= 4) return 'Avara Shuddhi';\n  if (totalScore &gt;= 5 &amp;&amp; totalScore &lt;= 8) return 'Madhyama Shuddhi';\n  if (totalScore &gt;= 9 &amp;&amp; totalScore &lt;= 12) return 'Pravara Shuddhi';\n  return 'Invalid Score';\n}\n</code></pre> <p>The classification is displayed on the UI:</p> <pre><code>Text(\n  'Shuddhi Classification: $classification',\n  style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),\n),\n</code></pre>"},{"location":"shuddhi_assessment/#navigation-buttons","title":"Navigation Buttons","text":"<ul> <li>Back Button:</li> </ul> <pre><code>IconButton(\n  icon: Icon(Icons.arrow_back),\n  onPressed: () {\n    widget.controller.previousPage(\n      duration: Duration(milliseconds: 300),\n      curve: Curves.easeInOut,\n    );\n  },\n),\n</code></pre> <ul> <li>Next Button:</li> </ul> <pre><code>ElevatedButton(\n  onPressed: () {\n    widget.controller.nextPage(\n      duration: Duration(milliseconds: 300),\n      curve: Curves.easeInOut,\n    );\n  },\n  child: Text('Next'),\n),\n</code></pre>"},{"location":"shuddhi_assessment/#utility-extensions","title":"Utility Extensions","text":""},{"location":"shuddhi_assessment/#string-capitalization","title":"String Capitalization","text":"<pre><code>extension StringExtension on String {\n  String capitalize() {\n    return \"${this[0].toUpperCase()}${this.substring(1)}\";\n  }\n}\n</code></pre> <ul> <li>Ensures proper capitalization of dropdown labels.</li> </ul>"},{"location":"shuddhi_assessment/#conclusion","title":"Conclusion","text":"<p>The Shuddhi Assessment Page provides an intuitive interface to evaluate the detoxification level based on critical Shuddhi factors. It ensures accurate scoring, real-time classification, and seamless navigation for a user-friendly experience.</p>"},{"location":"summary/","title":"Summary Page","text":"<p>The Summary Page serves as the final step in the Virechana Assessment App, summarizing the patient details, assessment metrics, and post-procedure data. It provides an option to review and submit the collected data to Google Sheets for record-keeping.</p>"},{"location":"summary/#overview","title":"Overview","text":"<p>Purpose: To display a consolidated summary of all data collected throughout the assessment and allow submission to Google Sheets.</p> <p>Features:</p> <ul> <li>Displays patient and assessment details.</li> <li>Provides a <code>Submit</code> button to save data to Google Sheets.</li> <li>Automatically resets all state and navigates back to the first page upon submission.</li> </ul>"},{"location":"summary/#key-features","title":"Key Features","text":"<p>Data Summary</p> <ul> <li>Displays data collected in previous steps, including:</li> <li>Patient details (e.g., Name, Diagnosis, etc.).</li> <li>Assessment metrics (e.g., Frequency, Consistency, Shuddhi details).</li> <li>Post-procedure health data (e.g., Temperature, BP, Complications).</li> </ul> <p>Integration with Google Sheets</p> <ul> <li>Submits all data to a Google Sheet using the <code>VirechanaSheetApi</code>.</li> </ul> <p>State Reset</p> <ul> <li>Resets all form fields and state providers after submission.</li> </ul> <p>Navigation</p> <ul> <li>Includes a Back button to return to the previous page.</li> <li>Automatically navigates to the first page upon successful submission.</li> </ul>"},{"location":"summary/#code-breakdown","title":"Code Breakdown","text":""},{"location":"summary/#class-declaration","title":"Class Declaration","text":"<pre><code>class SummaryPage extends ConsumerWidget {\n  final PageController controller;\n\n  SummaryPage({required this.controller});\n}\n</code></pre> <ul> <li>Inherits from <code>ConsumerWidget</code> for integration with Riverpod.</li> <li>Accepts a <code>PageController</code> to manage navigation between pages.</li> </ul>"},{"location":"summary/#data-summary","title":"Data Summary","text":"<p>The page displays all collected data as text:</p> <pre><code>Text('Patient Name: ${formData['patient_name']}'),\nText('Diagnosis: ${formData['diagnosis']}'),\nText('Frequency per day: ${formData['frequency_per_day']}'),\nText('Consistency: ${formData['consistency']}'),\nText('Urgency: ${formData['urgency']}'),\nText('Experience: ${formData['experience']}'),\nText('Antiki Shuddhi: ${formData['antiki_shuddhi']}'),\nText('Vaigiki Shuddhi: ${formData['vaigiki_shuddhi']}'),\nText('Temperature (\u00b0F): ${formData['post_procedural_temp']}'),\n</code></pre> <ul> <li>Dynamic Content: Data is fetched from Riverpod providers (<code>formProvider</code>, <code>samyakYogaProvider</code>, etc.).</li> <li>Formatted Display: Each metric is displayed with a descriptive label for clarity.</li> </ul>"},{"location":"summary/#submit-button","title":"Submit Button","text":""},{"location":"summary/#functionality","title":"Functionality","text":"<ul> <li>Gathers all data into a <code>User</code> object.</li> <li>Submits data to Google Sheets via the <code>VirechanaSheetApi</code>.</li> <li>Resets all state and navigates to the first page.</li> </ul> <pre><code>ElevatedButton(\n  onPressed: () async {\n    try {\n      final newUser = User(\n\n                    // page 1\n\n                    date: formData['visit_date'],\n                    pName: formData['patient_name'],\n                    uhid: formData['uhid_no'],\n                    age: formData['age'],\n                    sex: formData['sex'],\n                    opd: formData['opd_no'],\n                    diagnosis: formData['diagnosis'],\n\n                    // Page 2\n\n                    koshta_freq: formData['frequency_per_day'],\n                    koshta_consistency: formData['consistency'],\n                    koshta_urgency: formData['urgency'],\n                    koshta_experience: formData['experience'],\n                    koshta_samyak: formData['samyak_snigdha'],\n                    koshtaTotalScore: formData['Koshta_total_score'].toString(),\n\n                    // page 3\n\n                    temperature: formData['temperature'],\n                    pulseRate: formData['pulse_rate'],\n                    bp_systolic: formData['bp_systolic'],\n                    bp_diastolic: formData['bp_diastolic'],\n                    RespRate: formData['rr'],\n                    bmi: formData['bmi'],\n                    weight: formData['weight'],\n                    physExam: formData['pe'],\n                    vegaEntries: [],\n\n                    // page 4\n\n                    antiki_suddhi: formData['antiki_shuddhi'],\n                    vaigiki_shuddhi: formData['vaigiki_shuddhi'],\n                    laingiki_shuddhi: formData['laingiki_shuddhi'],\n                    shuddhi_final_score: formData['shuddhi_final_score'],\n                    shuddhi_classification: formData['shuddhi_classification'],\n\n                    // page 5\n\n                    srotovishuddhi: samyakData['Srotovishuddhi'],\n                    vatanululomana: samyakData['vatanululomana'],\n                    ruchi: samyakData['ruchi'],\n                    laghuta: samyakData['laghuta'],\n                    kayagni_anuvartana: samyakData['kayagni anuvartana'],\n                    varna_shuddhi: samyakData['varna shuddhi'],\n                    bhuddhi_shuddhi: samyakData['bhuddhi shuddhi'],\n                    samprasadana: samyakData['samprasadana'],\n\n                    // page 6 data\n\n                    pratiloma_gati_dosha_srava: ayogaData['Pratiloma Gati Dosha Srava'],\n                    glani: ayogaData['Glani'],\n                    hridya_ashuddhi: ayogaData['Hridya Ashuddhi'],\n                    kale_apravartan: ayogaData['Kale Apravartan'],\n                    kshtheevana: ayogaData['Kshtheevana'],\n                    tandra: ayogaData['Tandra'],\n                    marutasya_nigraha: ayogaData['Marutasya Nigraha'],\n                    paridaha: ayogaData['Paridaha'],\n                    bhrama: ayogaData['Bhrama'],\n                    gatreshu_bhramana: ayogaData['Gatreshu Bhramana'],\n\n                    // page 7\n\n                    medomamsa_udakaopmam: atiyogaData['Medomamsa udakaopmam'],\n                    angamarda: atiyogaData['Angamarda'],\n                    jarjaribhava: atiyogaData['Jarjaribhava'],\n                    klama: atiyogaData['Klama / Balabhava'],\n                    vepana: atiyogaData['Vepana'],\n                    tamah_pravesha: atiyogaData['Tamah Pravesha'],\n                    hikka: atiyogaData['Hikka'],\n                    guda_bhramsha: atiyogaData['Guda Bhramsha / nissarana'],\n                    netra_Pravesha: atiyogaData['Netra Pravesha'],\n                    parikartika: atiyogaData['Parikartika'],\n                    chimchimayan: atiyogaData['Chimchimayan'],\n                    parshva_shoola: atiyogaData['Parshva Shoola'],\n                    shoonyata: atiyogaData['Shoonyata'],\n\n                    // page 8\n\n                    post_procedural_temp: formData['post_procedural_temp'],\n                    post_procedural_pulse: formData['post_procedural_pulse'],\n                    post_procedural_bp_systolic: formData['post_procedural_bp_systolic'],\n                    post_procedural_bp_diastolic: formData['post_procedural_bp_diastolic'],\n                    post_procedural_resp: formData['post_procedural_resp'],\n                    post_procedural_weight: formData['post_procedural_weight'],\n                    post_procedural_complications: formData['post_procedural_complications'],\n                  );\n      );\n\n      await VirechanaSheetApi.insert([user.toJson()]);\n      if (formData['vega_entries'] != null &amp;&amp; formData['vega_entries'].isNotEmpty) {\n        List&lt;List&lt;String&gt;&gt; vegaRows = formData['vega_entries']\n            .map((entry) =&gt; [\n              entry['timeController']?.text ?? '',\n              entry['vegaController']?.text ?? '',\n              // Other fields...\n            ])\n            .toList();\n        await VirechanaSheetApi.insertVegaEntries(vegaRows);\n      }\n\n      ScaffoldMessenger.of(context).showSnackBar(\n        SnackBar(\n          content: Text('Data Submitted Successfully!'),\n          duration: Duration(seconds: 3),\n        ),\n      );\n\n      ref.read(formProvider.notifier).resetForm();\n      ref.read(samyakYogaProvider.notifier).resetState();\n      ref.read(ayogaProvider.notifier).resetState();\n      ref.read(atiyogaProvider.notifier).resetState();\n\n      controller.jumpToPage(0);\n    } catch (e) {\n      print(\"Submission Error: $e\");\n    }\n  },\n  child: Text('Submit'),\n);\n</code></pre>"},{"location":"summary/#steps-performed","title":"Steps Performed","text":"<p>Data Consolidation: Combines data from various state providers into a single <code>User</code> object. Submission to Google Sheets:</p> <ul> <li>Patient data is inserted using <code>VirechanaSheetApi.insert</code>.</li> <li>Vega entries are inserted using <code>VirechanaSheetApi.insertVegaEntries</code>.   State Reset:</li> <li>Resets <code>formProvider</code>, <code>samyakYogaProvider</code>, <code>ayogaProvider</code>, and <code>atiyogaProvider</code>.   Navigation:</li> <li>Returns to the first page upon successful submission.</li> </ul>"},{"location":"summary/#navigation","title":"Navigation","text":""},{"location":"summary/#back-button","title":"Back Button","text":"<pre><code>IconButton(\n  icon: Icon(Icons.arrow_back),\n  onPressed: () {\n    controller.previousPage(\n      duration: Duration(milliseconds: 300),\n      curve: Curves.easeInOut,\n    );\n  },\n),\n</code></pre> <ul> <li>Navigates to the previous page.</li> </ul>"},{"location":"summary/#usage","title":"Usage","text":""},{"location":"summary/#state-management","title":"State Management","text":"<p>The page uses the following providers:</p> <ul> <li><code>formProvider</code>: Holds general form data.</li> <li><code>samyakYogaProvider</code>: Holds Samyak Yoga data.</li> <li><code>ayogaProvider</code>: Holds Ayoga symptoms data.</li> <li><code>atiyogaProvider</code>: Holds Atiyoga symptoms data.</li> </ul>"},{"location":"summary/#data-submission","title":"Data Submission","text":"<p>Data is submitted to Google Sheets using:</p> <pre><code>await VirechanaSheetApi.insert([user.toJson()]);\n</code></pre>"},{"location":"summary/#state-reset","title":"State Reset","text":"<p>All state is reset to default values:</p> <pre><code>ref.read(formProvider.notifier).resetForm();\nref.read(samyakYogaProvider.notifier).resetState();\nref.read(ayogaProvider.notifier).resetState();\nref.read(atiyogaProvider.notifier).resetState();\n</code></pre>"},{"location":"summary/#conclusion","title":"Conclusion","text":"<p>The Summary Page is the final step in the Virechana Assessment App. It consolidates all collected data for review and submission, ensuring accurate record-keeping and resetting the app for the next assessment. This page enhances the app's usability by providing clear data visualization and seamless state management.</p>"},{"location":"user/","title":"User Data Model","text":"<p>The <code>User</code> class represents the data model for storing information across various pages of the Virechana Assessment App. This includes patient details, koshta assessment, vitals, shuddhi classifications, procedural outcomes, and more.</p>"},{"location":"user/#overview","title":"Overview","text":"<p>The <code>User</code> class and the <code>UserFields</code> utility provide a structured way to manage and store the data for each user. These fields are mapped directly to the headers in Google Sheets.</p>"},{"location":"user/#userfields","title":"UserFields","text":"<p>The <code>UserFields</code> class defines static constants that act as field names for both the Google Sheets headers and the <code>User</code> model. Below is the categorization of fields based on their corresponding pages.</p>"},{"location":"user/#page-1-patient-details","title":"Page 1: Patient Details","text":"<ul> <li><code>date</code>: Date of the assessment.</li> <li><code>pName</code>: Patient's name.</li> <li><code>uhid</code>: Unique hospital ID.</li> <li><code>age</code>: Patient's age.</li> <li><code>sex</code>: Patient's gender.</li> <li><code>opd</code>: OPD number.</li> <li><code>diagnosis</code>: Diagnosis details.</li> </ul>"},{"location":"user/#page-2-koshta-assessment","title":"Page 2: Koshta Assessment","text":"<ul> <li><code>koshta_freq</code>: Frequency of bowel movements.</li> <li><code>koshta_consistency</code>: Stool consistency.</li> <li><code>koshta_urgency</code>: Urgency level for bowel movements.</li> <li><code>koshta_experience</code>: Experience after consuming specific items.</li> <li><code>koshta_samyak</code>: Snigdha Lakshana achieved in.</li> <li><code>koshtaTotalScore</code>: Total score for koshta assessment.</li> </ul>"},{"location":"user/#page-3-vitals-and-physical-examination","title":"Page 3: Vitals and Physical Examination","text":"<ul> <li><code>temperature</code>: Body temperature.</li> <li><code>pulseRate</code>: Pulse rate.</li> <li><code>bp_systolic</code>: Systolic blood pressure.</li> <li><code>bp_diastolic</code>: Diastolic blood pressure.</li> <li><code>RespRate</code>: Respiratory rate.</li> <li><code>bmi</code>: Body mass index.</li> <li><code>weight</code>: Body weight.</li> <li><code>physExam</code>: Observations from physical examination.</li> </ul>"},{"location":"user/#page-4-shuddhi-assessment","title":"Page 4: Shuddhi Assessment","text":"<ul> <li><code>antiki_suddhi</code>: Antiki shuddhi score.</li> <li><code>vaigiki_shuddhi</code>: Vaigiki shuddhi score.</li> <li><code>laingiki_shuddhi</code>: Laingiki shuddhi score.</li> <li><code>shuddhi_final_score</code>: Final shuddhi score.</li> <li><code>shuddhi_classification</code>: Classification of shuddhi (e.g., Pravara, Madhyama, etc.).</li> </ul>"},{"location":"user/#page-5-samyak-yoga-lakshana","title":"Page 5: Samyak Yoga Lakshana","text":"<ul> <li><code>srotovishuddhi</code>: Srotovishuddhi observation.</li> <li><code>vatanululomana</code>: Vatanululomana observation.</li> <li><code>ruchi</code>: Improved taste perception.</li> <li><code>laghuta</code>: Sense of lightness.</li> <li><code>kayagni_anuvartana</code>: Kayagni anuvartana (long-term digestion improvement).</li> <li><code>varna_shuddhi</code>: Improvement in skin complexion.</li> <li><code>bhuddhi_shuddhi</code>: Clarity of mind.</li> <li><code>samprasadana</code>: Restoration of sense organs.</li> </ul>"},{"location":"user/#page-6-ayoga-of-virechana","title":"Page 6: Ayoga of Virechana","text":"<ul> <li><code>pratiloma_gati_dosha_srava</code>: Pratiloma gati dosha srava issues.</li> <li><code>glani</code>: Lassitude and fatigue.</li> <li><code>hridya_ashuddhi</code>: Discomfort in the chest region.</li> <li><code>kale_apravartan</code>: Delayed response to the treatment.</li> <li><code>kshtheevana</code>: Nausea or excessive salivation.</li> <li><code>tandra</code>: Drowsiness or stupor.</li> <li><code>marutasya_nigraha</code>: Incomplete evacuation of body waste.</li> <li><code>paridaha</code>: Burning sensation.</li> <li><code>bhrama</code>: Dizziness.</li> <li><code>gatreshu_bhramana</code>: Involuntary body movements.</li> </ul>"},{"location":"user/#page-7-atiyoga-of-virechana","title":"Page 7: Atiyoga of Virechana","text":"<ul> <li><code>medomamsa_udakaopmam</code>: Foul-smelling stool.</li> <li><code>angamarda</code>: Body pain.</li> <li><code>jarjaribhava</code>: Weakness or loss of confidence.</li> <li><code>klama</code>: Fatigue without exertion.</li> <li><code>vepana</code>: Tremors.</li> <li><code>tamah_pravesha</code>: Feeling of darkness or dizziness.</li> <li><code>hikka</code>: Persistent hiccups.</li> <li><code>guda_bhramsha</code>: Rectal prolapse.</li> <li><code>netra_Pravesha</code>: Sunken eyes.</li> <li><code>parikartika</code>: Cutting pain in the rectal region.</li> <li><code>chimchimayan</code>: Tingling sensation.</li> <li><code>parshva_shoola</code>: Pain in the flanks.</li> <li><code>shoonyata</code>: Emptiness or thoughtlessness.</li> </ul>"},{"location":"user/#page-8-post-procedural-observations","title":"Page 8: Post-Procedural Observations","text":"<ul> <li><code>post_procedural_temp</code>: Post-procedural body temperature.</li> <li><code>post_procedural_pulse</code>: Post-procedural pulse rate.</li> <li><code>post_procedural_bp_systolic</code>: Post-procedural systolic blood pressure.</li> <li><code>post_procedural_bp_diastolic</code>: Post-procedural diastolic blood pressure.</li> <li><code>post_procedural_resp</code>: Post-procedural respiratory rate.</li> <li><code>post_procedural_weight</code>: Post-procedural weight.</li> <li><code>post_procedural_complications</code>: Observed complications post-procedure.</li> </ul>"},{"location":"user/#user-class","title":"User Class","text":"<p>The <code>User</code> class represents an individual patient's data. Each field corresponds to a <code>UserFields</code> property and is serialized into a JSON format for integration with Google Sheets.</p>"},{"location":"user/#constructor","title":"Constructor","text":"<p>The <code>User</code> class constructor accepts parameters for all fields, divided into categories (Page 1 to Page 8). Here's a sample instantiation:</p> <pre><code>const user = User(\ndate: '2024-01-01',\npName: 'Sachin Singh',\nuhid: 'UH123456',\nage: '35',\nsex: 'Male',\nopd: 'OPD789',\ndiagnosis: 'Diagnosis Example',\n// Other additional parameters...\n);\n\n</code></pre>"},{"location":"user/#tojson-method","title":"toJson Method","text":"<p>The <code>toJson()</code> method converts the <code>User</code> object into a JSON-compatible <code>Map</code> for data insertion into Google Sheets.</p> <pre><code>\nMap&lt;String, dynamic&gt; toJson() =&gt; {\nUserFields.date: date ?? 'Unknown',\nUserFields.pName: pName ?? 'Unknown',\nUserFields.uhid: uhid ?? 'Unknown',\n// Other additional mappings...\n};\n\n</code></pre>"},{"location":"user/#get-fields-method","title":"Get Fields Method","text":"<p>The <code>getFields()</code> method in <code>UserFields</code> returns a list of all field names for initializing Google Sheets headers.</p> <pre><code>\nList&lt;String&gt; getFields() =&gt; [\nUserFields.date,\nUserFields.pName,\nUserFields.uhid,\nUserFields.age,\n// Other additional fields...\n];\n\n</code></pre> <p>This structured data model ensures all patient information and procedural outcomes are consistently captured and stored for analysis or further processing.</p>"},{"location":"widgets/","title":"Main Application (main.dart)","text":"<p>This documentation provides an overview of the main.dart file, the entry point for the Virechana Karma Assessment App. It outlines the structure, key components, and functionalities implemented in the application.</p>"},{"location":"widgets/#overview","title":"Overview","text":"<p>The <code>main.dart</code> file:</p> <ul> <li>Initializes the app and sets up necessary dependencies.</li> <li>Defines the main navigation structure using <code>PageView</code>.</li> <li>Integrates with the Google Sheets API for data storage.</li> <li>Provides an intuitive user interface for the assessment process.</li> </ul>"},{"location":"widgets/#key-components","title":"Key Components","text":"<p>Main Entry Point</p> <ul> <li>Initializes the app and ensures necessary dependencies are ready.   VirechanaApp Class</li> <li>Configures the app theme and sets the home screen.   FormNavigator Class</li> <li>Implements a <code>PageView</code> to navigate between assessment screens.</li> </ul>"},{"location":"widgets/#code-breakdown","title":"Code Breakdown","text":""},{"location":"widgets/#app-initialization","title":"App Initialization","text":"<pre><code>Future main() async {\n  WidgetsFlutterBinding.ensureInitialized();\n  await VirechanaSheetApi.init();\n  runApp(\n    ProviderScope(\n      child: VirechanaApp(),\n    ),\n  );\n}\n</code></pre> <ul> <li><code>WidgetsFlutterBinding.ensureInitialized()</code>: Ensures Flutter bindings are initialized before running the app.</li> <li><code>VirechanaSheetApi.init()</code>: Initializes the Google Sheets API for data integration.</li> <li><code>ProviderScope</code>: Wraps the app to enable Riverpod state management.</li> </ul>"},{"location":"widgets/#virechanaapp-class","title":"VirechanaApp Class","text":"<pre><code>class VirechanaApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      debugShowCheckedModeBanner: false,\n      title: 'Virechana Karma App',\n      theme: ThemeData(primarySwatch: Colors.teal),\n      home: FormNavigator(),\n    );\n  }\n}\n</code></pre> <ul> <li><code>MaterialApp</code>: Provides the app's configuration and navigation.</li> <li><code>debugShowCheckedModeBanner</code>: Disabled for a cleaner interface.</li> <li><code>title</code>: Sets the app's title.</li> <li><code>theme</code>: Configures the app's theme with a teal color scheme.</li> <li><code>home</code>: Sets the starting page to <code>FormNavigator</code>.</li> </ul>"},{"location":"widgets/#formnavigator-class","title":"FormNavigator Class","text":"<p>The <code>FormNavigator</code> class implements the main navigation for the assessment process using a <code>PageView</code>.</p>"},{"location":"widgets/#pageview-implementation","title":"PageView Implementation","text":"<pre><code>class FormNavigator extends StatefulWidget {\n  @override\n  _FormNavigatorState createState() =&gt; _FormNavigatorState();\n}\n\nclass _FormNavigatorState extends State&lt;FormNavigator&gt; {\n  final PageController _pageController = PageController();\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: Text('Virechana Karma Assessment')),\n      body: PageView(\n        controller: _pageController,\n        physics: NeverScrollableScrollPhysics(),\n        children: [\n          PatientDetailsPage(controller: _pageController),\n          PurvakarmaPage(controller: _pageController),\n          PradhanaKarmaPage(controller: _pageController),\n          ShuddhiAssessmentPage(controller: _pageController),\n          SamyakYogaLakshanaPage(controller: _pageController),\n          AyogaOfVirechnaPage(controller: _pageController),\n          AtiyogaOfVirechanaPage(controller: _pageController),\n          PostProcedurePage(controller: _pageController),\n          SummaryPage(controller: _pageController),\n        ],\n      ),\n    );\n  }\n}\n</code></pre>"},{"location":"widgets/#key-features","title":"Key Features","text":"<p>PageController</p> <ul> <li>Manages navigation between pages programmatically.</li> </ul> <p><code>PageView</code></p> <ul> <li>Displays the assessment screens.</li> <li><code>NeverScrollableScrollPhysics</code>: Prevents manual scrolling to enforce the sequential flow of pages.</li> </ul> <p>Children Pages</p> <p>Pages included:</p> <ul> <li>PatientDetailsPage: Collects basic patient information.</li> <li>PurvakarmaPage: Gathers pre-assessment metrics.</li> <li>PradhanaKarmaPage: Records procedural details.</li> <li>ShuddhiAssessmentPage: Evaluates the effectiveness of the procedure.</li> <li>SamyakYogaLakshanaPage: Captures <code>Samyak Yoga</code> characteristics.</li> <li>AyogaOfVirechnaPage: Lists symptoms indicating Ayoga.</li> <li>AtiyogaOfVirechanaPage: Lists symptoms indicating Atiyoga.</li> <li>PostProcedurePage: Records post-procedure observations.</li> <li>SummaryPage: Consolidates all collected data for review and submission.</li> </ul>"},{"location":"widgets/#navigation-flow","title":"Navigation Flow","text":"<p>The navigation between pages is controlled programmatically using <code>PageController</code>. Each page:</p> <ul> <li>Receives the <code>PageController</code> instance as a parameter.</li> <li>Navigates to the next page upon user action.</li> </ul>"},{"location":"widgets/#integration-with-google-sheets","title":"Integration with Google Sheets","text":"<p>The <code>VirechanaSheetApi</code> is initialized at the start to allow seamless data submission to Google Sheets:</p> <pre><code>await VirechanaSheetApi.init();\n</code></pre>"},{"location":"widgets/#conclusion","title":"Conclusion","text":"<p>The main.dart file serves as the backbone of the Virechana Assessment App. It initializes the app, sets up dependencies, and defines the navigation flow using <code>PageView</code>. With its clean and modular design, the app ensures a seamless and user-friendly experience for conducting assessments.</p>"}]}